{"1":{"sceneName":"Small_Exemple","patchId":"1","code":"process = vgroup(\"SAtonalSoftHarp\",environment{declare name \"Atonal Soft Harp\";\ndeclare author \"ER\"; //Adapted from NLFeks by Julius Smith and Romain Michon;\n\n/* =============== DESCRIPTION ======================== :\n\n- Soft Atonal Harp\n- Swing  = Plucking all the strings one by one\n- Left = Slow rhythm /Low frequencies/ Silence\n- Right = Fast rhythm/ High frequencies\n- Back = Short and dry notes\n- Front = Long and bright notes\n\n*/\n\nimport(\"stdfaust.lib\");\n\n//==================== INSTRUMENT =======================\n\nprocess = par(i, N, NFLeks(i)):>_;\n\nNFLeks(n) = filtered_excitation(n,P(freq(n)),freq(n)) : stringloop(freq(n));\n\n//==================== GUI SPECIFICATION ================\nN = 20;\nhand = hslider(\"h:[1]/Instrument Hand[acc:0 1 -10 0 10]\", 10, 0, N, 1) : ba.automat(bps, 15, 0.0)// => gate\nwith{\nbps = hslider(\"h:[1]/Speed[style:knob][acc:0 1 -10 0 10]\", 480, 180, 720, 1):si.smooth(0.999) : min(720) : max(180) : int;\n};\ngain = 1;\n\npickangle  = 0.9;\n\nbeta = 0.5;\n\n// String decay time in seconds:\nt60 = hslider(\"h:[2]Reverberation/ Resonance[unit:s][acc:2 1 -10 0 10]\", 5, 0.5, 10, 0.01):min(10):max(0.5);  // -60db decay time (sec)\n\nB = 0;\nL = -10 : ba.db2linear;\n\n//---------------------------------- FREQUENCY TABLE ---------------------------\n\nfreq(0) = 200;\nfreq(1) = 215;\nfreq(2) = 230;\nfreq(3) = 245;\nfreq(4) = 260;\nfreq(5) = 275;\n\nfreq(d)\t = freq(d-6)*(2);\t\n\n//==================== SIGNAL PROCESSING ================\n\n//----------------------- noiseburst -------------------------\n// White noise burst (adapted from Faust's karplus.dsp example)\n// Requires music.lib (for no.noise)\nnoiseburst(d,e) = no.noise : *(trigger(d,e))\nwith{\n\tupfront(x) = (x-x') > 0;\n\tdecay(n,x) = x - (x>0)/n;\n\trelease(n) = + ~ decay(n);\n\tposition(d) = abs(hand - d) < 0.5;\n\ttrigger(d,n) = position(d) : upfront : release(n) : > (0.0);\n};\n\nP(f) = ma.SR/f ; // fundamental period in samples\nPmax = 4096; // maximum P (for delay-line allocation)\n\nppdel(f) = beta*P(f); // pick position delay\npickposfilter(f) = fi.ffcombfilter(Pmax,ppdel(f),-1); // defined in filter.lib\n\nexcitation(d,e) = noiseburst(d,e) : *(gain); // defined in signal.lib\n\nrho(f) = pow(0.001,1.0/(f*t60)); // multiplies loop-gain\n\n// Original EKS damping filter:\nb1 = 0.5*B; b0 = 1.0-b1; // S and 1-S\ndampingfilter1(f,x) = rho(f) * ((b0 * x) + (b1 * x'));\n\n// Linear phase FIR3 damping filter:\nh0 = (1.0 + B)/2; h1 = (1.0 - B)/4;\ndampingfilter2(f,x) = rho(f) * (h0 * x' + h1*(x+x''));\n\nloopfilter(f) = dampingfilter2(f); // or dampingfilter1\n\nfiltered_excitation(d,e,f) = excitation(d,e) : si.smooth(pickangle) \n\t\t    : pickposfilter(f) : fi.levelfilter(L,f); // see filter.lib\n\nstringloop(f) = (+ : de.fdelay4(Pmax, P(f)-2)) ~ (loopfilter(f));\n\n}.process);","name":"SAtonalSoftHarp","x":"366.9921875","y":"301.9921875","inputs":{"source":[]},"outputs":{"destination":["2"]},"params":{"sliders":[{"path":"/SAtonalSoftHarp/0x00/Instrument_Hand","value":10},{"path":"/SAtonalSoftHarp/0x00/Speed","value":480},{"path":"/SAtonalSoftHarp/Reverberation/Resonance","value":5}]},"acc":{"controles":[{"axis":"0","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/SAtonalSoftHarp/0x00/Instrument_Hand","isEnabled":true},{"axis":"0","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/SAtonalSoftHarp/0x00/Speed","isEnabled":true},{"axis":"2","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/SAtonalSoftHarp/Reverberation/Resonance","isEnabled":true}]}},"2":{"sceneName":"Small_Exemple","patchId":"2","code":"process = vgroup(\"Freeverb\",environment{declare name        \"freeverb\";\ndeclare version     \"1.0\";\ndeclare author      \"Grame\";\ndeclare license     \"BSD\";\ndeclare copyright   \"(c) GRAME 2006\";\ndeclare reference   \"https://ccrma.stanford.edu/~jos/pasp/Freeverb.html\";\n\nimport(\"stdfaust.lib\");\n\n/* Description : \n\n- Reverberation processor.\n- Head = maximum reverberation.\n\n*/ \n\nfreeverb = vgroup(\"Freeverb\", fxctrl(fixedgain, wetSlider, stereoReverb(combfeed, allpassfeed, dampSlider, stereospread)));\n\nprocess = _<: freeverb :>_;\n\n//======================================================\n//\n//                      Freeverb\n//        Faster version using fixed delays (20% gain)\n//\n//======================================================\n\n// Constant Parameters\n//--------------------\n\nfixedgain   = 0.015; //value of the gain of fxctrl\nscalewet    = 3.0;\nscaledry    = 2.0;\nscaledamp   = 0.4;\nscaleroom   = 0.28;\noffsetroom  = 0.7;\ninitialroom = 0.5;\ninitialdamp = 0.5;\ninitialwet  = 1.0/scalewet;\ninitialdry  = 0;\ninitialwidth= 1.0;\ninitialmode = 0.0;\nfreezemode  = 0.5;\nstereospread= 23;\nallpassfeed = 0.5; //feedback of the delays used in allpass filters\n\n// Filter Parameters\n//------------------\n\ncombtuningL1    = 1116;\ncombtuningL2    = 1188;\ncombtuningL3    = 1277;\ncombtuningL4    = 1356;\ncombtuningL5    = 1422;\ncombtuningL6    = 1491;\ncombtuningL7    = 1557;\ncombtuningL8    = 1617;\n\nallpasstuningL1 = 556;\nallpasstuningL2 = 441;\nallpasstuningL3 = 341;\nallpasstuningL4 = 225;\n\n// Control Sliders\n//--------------------\n// Damp : filters the high frequencies of the echoes (especially active for great values of RoomSize)\n// RoomSize : size of the reverberation room\n// Dry : original signal\n// Wet : reverberated signal\n\n//dampSlider      = hslider(\"Damp\",0.5, 0, 1, 0.025)*scaledamp;\n\ndampSlider \t\t= 0.7*scaledamp;\nroomsizeSlider  = hslider(\"Reverberation Room Size[acc:1 1 -10 0 10]\", 0.5, 0.1, 0.9, 0.025) : si.smooth(0.999) : min(0.9) :max(0.1) *scaleroom + offsetroom;\nwetSlider       = hslider(\"Reverberation Intensity[acc:1 1 -10 0 10]\", 0.3333, 0.1, 0.9, 0.025) : si.smooth(0.999) : min(0.9) :max(0.1);\ncombfeed        = roomsizeSlider;\n\n// Comb and Allpass filters\n//-------------------------\n\nallpass(dt,fb) = (_,_ <: (*(fb),_:+:@(dt)), -) ~ _ : (!,_);\n\ncomb(dt, fb, damp) = (+:@(dt)) ~ (*(1-damp) : (+ ~ *(damp)) : *(fb));\n\n// Reverb components\n//------------------\n\nmonoReverb(fb1, fb2, damp, spread)\n    = _ <:  comb(combtuningL1+spread, fb1, damp),\n            comb(combtuningL2+spread, fb1, damp),\n            comb(combtuningL3+spread, fb1, damp),\n            comb(combtuningL4+spread, fb1, damp),\n            comb(combtuningL5+spread, fb1, damp),\n            comb(combtuningL6+spread, fb1, damp),\n            comb(combtuningL7+spread, fb1, damp),\n            comb(combtuningL8+spread, fb1, damp)\n        +>\n            allpass (allpasstuningL1+spread, fb2)\n        :   allpass (allpasstuningL2+spread, fb2)\n        :   allpass (allpasstuningL3+spread, fb2)\n        :   allpass (allpasstuningL4+spread, fb2)\n        ;\n\nstereoReverb(fb1, fb2, damp, spread)\n    = + <:  monoReverb(fb1, fb2, damp, 0), monoReverb(fb1, fb2, damp, spread);\n\n// fxctrl : add an input gain and a wet-dry control to a stereo FX\n//----------------------------------------------------------------\n\nfxctrl(g,w,Fx) =  _,_ <: (*(g),*(g) : Fx : *(w),*(w)), *(1-w), *(1-w) +> _,_;\n}.process);","name":"Freeverb","x":"681.9921875","y":"372.98828125","inputs":{"source":["1"]},"outputs":{"destination":["output"]},"params":{"sliders":[{"path":"/Freeverb/Freeverb/Reverberation_Intensity","value":0.33329999446868896},{"path":"/Freeverb/Freeverb/Reverberation_Room_Size","value":0.5}]},"acc":{"controles":[{"axis":"1","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/Freeverb/Freeverb/Reverberation_Intensity","isEnabled":true},{"axis":"1","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/Freeverb/Freeverb/Reverberation_Room_Size","isEnabled":true}]}}}