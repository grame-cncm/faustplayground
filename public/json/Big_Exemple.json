{"1":{"sceneName":"Big_Exemple","patchId":"1","code":"process = vgroup(\"Kisana\",environment{declare name  \t\"Kisana\";\ndeclare author  \"Yann Orlarey\";\n\n//Modifications GRAME July 2015\n\n/* ========= DESCRITPION =============\n\n- Kisana : 3-loops string instrument (based on Karplus-Strong)\n- Head = Silence\n- Tilt = High frequencies \n- Front = High + Medium frequencies\n- Bottom = High + Medium + Low frequencies\n- Left = Minimum brightness\n- Right = Maximum birghtness\n- Front = Long notes\n- Back = Short notes\n\n*/\n\nimport(\"stdfaust.lib\");\n\nKEY = 60;\t// basic midi key\nNCY = 15; \t// note cycle length\nCCY = 15;\t// control cycle length\nBPS = 360;\t// general tempo (ba.beat per sec)\n\nprocess = kisana;    \n\n//-------------------------------kisana----------------------------------\n// USAGE:  kisana : _,_;\n// \t\t3-loops string instrument\n//-----------------------------------------------------------------------\n\nkisana = vgroup(\"Kisana\", harpe(C,11,48), harpe(C,11,60), (harpe(C,11,72) : *(1.5), *(1.5)) \n\t:>*(l))\n\twith {\n\t\tl = -20 : ba.db2linear;//hslider(\"[1]Volume\",-20, -60, 0, 0.01) : ba.db2linear;\n\t\tC = hslider(\"[2]Brightness[acc:0 1 -10 0 10]\", 0.2, 0, 1, 0.01) : ba.automat(BPS, CCY, 0.0);\n\t};\n\n//----------------------------------Harpe--------------------------------\n// USAGE:  harpe(C,10,60) : _,_;\n//\t\tC is the filter coefficient 0..1\n// \t\tBuild a N (10) strings harpe using a pentatonic scale \n//\t\tbased on midi key b (60)\n//\t\tEach string is triggered by a specific\n//\t\tposition of the \"hand\"\n//-----------------------------------------------------------------------\nharpe(C,N,b) = \thand(b) <: par(i, N, position(i+1)\n\t\t\t\t\t\t\t: string(C,Penta(b).degree2Hz(i), att, lvl)\n\t\t\t\t\t\t\t: pan((i+0.5)/N) )\n\t\t\t\t \t:> _,_\n\twith {\n\t\tatt  = hslider(\"[3]Resonance[acc:2 1 -10 0 12]\", 4, 0.1, 10, 0.01); \n\t\thand(48) = vslider(\"h:[1]Instrument Hands/1 (Note %b)[unit:pk][acc:1 0 -10 0 14]\", 0, 0, N, 1) : int : ba.automat(120, CCY, 0.0);\n\t\thand(60) = vslider(\"h:[1]Instrument Hands/2 (Note %b)[unit:pk][acc:1 0 -10 0 14]\", 2, 0, N, 1) : int : ba.automat(240, CCY, 0.0);\n\t\thand(72) = vslider(\"h:[1]Instrument Hands/3 (Note %b)[unit:pk][acc:1 0 -10 0 10]\", 4, 0, N, 1) : int : ba.automat(480, CCY, 0.0);\n\t\t//lvl  = vslider(\"h:loop/level\", 0, 0, 6, 1) : int : ba.automat(BPS, CCY, 0.0) : -(6) : ba.db2linear; \n\t\tlvl = 1;\n\t\tpan(p) = _ <: *(sqrt(1-p)), *(sqrt(p));\n\t\tposition(a,x) = abs(x - a) < 0.5;\n\t};\n\n//----------------------------------Penta-------------------------------\n// Pentatonic scale with degree to midi and degree to Hz conversion\n// USAGE: Penta(60).degree2midi(3) ==> 67 midikey\n//        Penta(60).degree2Hz(4)   ==> 440 Hz\n//-----------------------------------------------------------------------\n\nPenta(key) = environment {\n\n\tA4Hz = 440; \n\t\n\tdegree2midi(0) = key+0;\n\tdegree2midi(1) = key+2;\n\tdegree2midi(2) = key+4;\n\tdegree2midi(3) = key+7;\n\tdegree2midi(4) = key+9;\n\tdegree2midi(d) = degree2midi(d-5)+12;\n\t\n\tdegree2Hz(d) = A4Hz*semiton(degree2midi(d)-69) with { semiton(n) = 2.0^(n/12.0); };\n\n}; \n \n//----------------------------------String-------------------------------\n// A karplus-strong string.\n//\n// USAGE: string(440Hz, 4s, 1.0, button(\"play\"))\n// or\t  button(\"play\") : string(440Hz, 4s, 1.0)\n//-----------------------------------------------------------------------\n\nstring(coef, freq, t60, level, trig) = no.noise*level\n\t\t\t\t\t\t\t: *(trig : trigger(freq2samples(freq)))\n\t\t\t\t\t\t\t: resonator(freq2samples(freq), att)\n\twith {\n\t\tresonator(d,a)\t= (+ : @(d-1)) ~ (average : *(a));\n\t\taverage(x)\t\t= (x*(1+coef)+x'*(1-coef))/2;\n\t\ttrigger(n) \t\t= upfront : + ~ decay(n) : >(0.0);\n\t\tupfront(x) \t\t= (x-x') > 0.0;\n\t\tdecay(n,x)\t\t= x - (x>0.0)/n;\n\t\tfreq2samples(f) = 44100.0/f;\n\t\tatt \t\t\t= pow(0.001,1.0/(freq*t60)); // attenuation coefficient\n\t\trandom  \t\t= +(12345)~*(1103515245);\n\t\tnoise   \t\t= random/2147483647.0;\n\t};\n\n   \n}.process);","name":"Kisana","x":"616.9921875","y":"585","inputs":{"source":[]},"outputs":{"destination":["6"]},"params":{"sliders":[{"path":"/Kisana/Kisana/Instrument_Hands/1_(Note_48)","value":0},{"path":"/Kisana/Kisana/Instrument_Hands/2_(Note_60)","value":2},{"path":"/Kisana/Kisana/Instrument_Hands/3_(Note_72)","value":4},{"path":"/Kisana/Kisana/Brightness","value":0.20000000298023224},{"path":"/Kisana/Kisana/Resonance","value":4}]},"acc":{"controles":[{"axis":"1","curve":"0","amin":"-10","amid":"0","amax":"14","adress":"/Kisana/Kisana/Instrument_Hands/1_(Note_48)","isEnabled":true},{"axis":"1","curve":"0","amin":"-10","amid":"0","amax":"14","adress":"/Kisana/Kisana/Instrument_Hands/2_(Note_60)","isEnabled":true},{"axis":"1","curve":"0","amin":"-10","amid":"0","amax":"10","adress":"/Kisana/Kisana/Instrument_Hands/3_(Note_72)","isEnabled":true},{"axis":"0","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/Kisana/Kisana/Brightness","isEnabled":true},{"axis":"2","curve":"1","amin":"-10","amid":"0","amax":"12","adress":"/Kisana/Kisana/Resonance","isEnabled":true}]}},"2":{"sceneName":"Big_Exemple","patchId":"2","code":"process = vgroup(\"SAtonalSoftHarp\",environment{declare name \"Atonal Soft Harp\";\ndeclare author \"ER\"; //Adapted from NLFeks by Julius Smith and Romain Michon;\n\n/* =============== DESCRIPTION ======================== :\n\n- Soft Atonal Harp\n- Swing  = Plucking all the strings one by one\n- Left = Slow rhythm /Low frequencies/ Silence\n- Right = Fast rhythm/ High frequencies\n- Back = Short and dry notes\n- Front = Long and bright notes\n\n*/\n\nimport(\"stdfaust.lib\");\n\n//==================== INSTRUMENT =======================\n\nprocess = par(i, N, NFLeks(i)):>_;\n\nNFLeks(n) = filtered_excitation(n,P(freq(n)),freq(n)) : stringloop(freq(n));\n\n//==================== GUI SPECIFICATION ================\nN = 20;\nhand = hslider(\"h:[1]/Instrument Hand[acc:0 1 -10 0 10]\", 10, 0, N, 1) : ba.automat(bps, 15, 0.0)// => gate\nwith{\nbps = hslider(\"h:[1]/Speed[style:knob][acc:0 1 -10 0 10]\", 480, 180, 720, 1):si.smooth(0.999) : min(720) : max(180) : int;\n};\ngain = 1;\n\npickangle  = 0.9;\n\nbeta = 0.5;\n\n// String decay time in seconds:\nt60 = hslider(\"h:[2]Reverberation/ Resonance[unit:s][acc:2 1 -10 0 10]\", 5, 0.5, 10, 0.01):min(10):max(0.5);  // -60db decay time (sec)\n\nB = 0;\nL = -10 : ba.db2linear;\n\n//---------------------------------- FREQUENCY TABLE ---------------------------\n\nfreq(0) = 200;\nfreq(1) = 215;\nfreq(2) = 230;\nfreq(3) = 245;\nfreq(4) = 260;\nfreq(5) = 275;\n\nfreq(d)\t = freq(d-6)*(2);\t\n\n//==================== SIGNAL PROCESSING ================\n\n//----------------------- noiseburst -------------------------\n// White noise burst (adapted from Faust's karplus.dsp example)\n// Requires music.lib (for no.noise)\nnoiseburst(d,e) = no.noise : *(trigger(d,e))\nwith{\n\tupfront(x) = (x-x') > 0;\n\tdecay(n,x) = x - (x>0)/n;\n\trelease(n) = + ~ decay(n);\n\tposition(d) = abs(hand - d) < 0.5;\n\ttrigger(d,n) = position(d) : upfront : release(n) : > (0.0);\n};\n\nP(f) = ma.SR/f ; // fundamental period in samples\nPmax = 4096; // maximum P (for delay-line allocation)\n\nppdel(f) = beta*P(f); // pick position delay\npickposfilter(f) = fi.ffcombfilter(Pmax,ppdel(f),-1); // defined in filter.lib\n\nexcitation(d,e) = noiseburst(d,e) : *(gain); // defined in signal.lib\n\nrho(f) = pow(0.001,1.0/(f*t60)); // multiplies loop-gain\n\n// Original EKS damping filter:\nb1 = 0.5*B; b0 = 1.0-b1; // S and 1-S\ndampingfilter1(f,x) = rho(f) * ((b0 * x) + (b1 * x'));\n\n// Linear phase FIR3 damping filter:\nh0 = (1.0 + B)/2; h1 = (1.0 - B)/4;\ndampingfilter2(f,x) = rho(f) * (h0 * x' + h1*(x+x''));\n\nloopfilter(f) = dampingfilter2(f); // or dampingfilter1\n\nfiltered_excitation(d,e,f) = excitation(d,e) : si.smooth(pickangle) \n\t\t    : pickposfilter(f) : fi.levelfilter(L,f); // see filter.lib\n\nstringloop(f) = (+ : de.fdelay4(Pmax, P(f)-2)) ~ (loopfilter(f));\n\n}.process);","name":"SAtonalSoftHarp","x":"331.9921875","y":"98.984375","inputs":{"source":[]},"outputs":{"destination":["5"]},"params":{"sliders":[{"path":"/SAtonalSoftHarp/0x00/Instrument_Hand","value":10},{"path":"/SAtonalSoftHarp/0x00/Speed","value":480},{"path":"/SAtonalSoftHarp/Reverberation/Resonance","value":5}]},"acc":{"controles":[{"axis":"0","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/SAtonalSoftHarp/0x00/Instrument_Hand","isEnabled":true},{"axis":"0","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/SAtonalSoftHarp/0x00/Speed","isEnabled":true},{"axis":"2","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/SAtonalSoftHarp/Reverberation/Resonance","isEnabled":true}]}},"3":{"sceneName":"Big_Exemple","patchId":"3","code":"process = vgroup(\"STunedBar6\",environment{declare name \"Tuned Bar\";\ndeclare description \"Nonlinear Banded Waveguide Models\";\ndeclare name \"Six Rack Tuned Bars\";\ndeclare author \"ER\";//From \"Tuned Bar\" by Romain Michon (rmichon@ccrma.stanford.edu);\n\n\n/* =========== DESCRIPTION =============\n\n- Six rack tuned bars\n- Head = Silence/Resonance\n- Tilt = High frequencies \n- Front = High + Medium frequencies\n- Bottom = High + Medium + Low frequencies\n\n*/\n \nimport(\"stdfaust.lib\");\ninstrument = library(\"instruments.lib\");\n\n//==================== INSTRUMENT =======================\n\nprocess = vgroup(\"tunedBars\",hgroup(\"[1]\",par(i, 6, onerack(i,i,i))):>_);\n\nonerack(h,n,e) = hgroup(\"Bar %n\", par(i, 5, tunedBar(h,i,e)));\n\ntunedBar(h,n,e) =\n\t\t((select-1)*-1) <:\n\t\t//nModes resonances with nModes feedbacks for bow table look-up \n\t\tpar(i,nModes,(resonance(i,freqqy(n,e),gate(h,n))~_)) :> + : \n\t\t//Signal Scaling and stereo\n\t\t*(4);\n\n//==================== GUI SPECIFICATION ================\n\ngain = 0.8;\ngate(h,n) = position(h,n) : upfront;\nhand(0) = vslider(\"Instrument Hand[acc:1 0 -10 0 18]\", 0, 0, 5, 1):int:ba.automat(120, 15, 0.0);\nhand(1) = vslider(\"Instrument Hand[acc:1 0 -10 0 18]\", 0, 0, 5, 1):int:ba.automat(120, 15, 0.0);\nhand(2) = vslider(\"Instrument Hand[acc:1 0 -10 0 14]\", 2, 0, 5, 1):int:ba.automat(240, 15, 0.0);\nhand(3) = vslider(\"Instrument Hand[acc:1 0 -10 0 14]\", 2, 0, 5, 1):int:ba.automat(240, 15, 0.0);\nhand(4) = vslider(\"Instrument Hand[acc:1 0 -10 0 10]\", 4, 0, 5, 1):int:ba.automat(480, 15, 0.0);\nhand(5) = vslider(\"Instrument Hand[acc:1 0 -10 0 10]\", 4, 0, 5, 1):int:ba.automat(480, 15, 0.0);\n\nposition(h,n) = abs(hand(h) - n) < 0.5;\nupfront(x) = x>x';\n\nselect = 1;\nintegrationConstant = 0;\nbaseGain = 1;\n\n//----------------------- Frequency Table --------------------\n\nfreq(0) = 92.49;\nfreq(1) = 103.82;\nfreq(2) = 116.54;\nfreq(3) = 138.59;\nfreq(4) = 155.56;\n\nfreq(d)\t = freq(d-5)*2;\nfreqqy(d,e) = freq(d+e*5);\n//==================== MODAL PARAMETERS ================\n\npreset = 2;\n\nnMode(2) = 4;\n\nmodes(2,0) = 1;\nbasegains(2,0) = pow(0.999,1);\nexcitation(2,0,g) = 1*gain*g/nMode(2);\n\nmodes(2,1) = 4.0198391420;\nbasegains(2,1) = pow(0.999,2);\nexcitation(2,1,g) = 1*gain*g/nMode(2);\n\nmodes(2,2) = 10.7184986595;\nbasegains(2,2) = pow(0.999,3);\nexcitation(2,2,g) = 1*gain*g/nMode(2);\n\nmodes(2,3) = 18.0697050938;\nbasegains(2,3) = pow(0.999,4);\nexcitation(2,3,g) = 1*gain*g/nMode(2);\n\n//==================== SIGNAL PROCESSING ================\n\n//----------------------- Nonlinear filter ----------------------------\n//nonlinearities are created by the nonlinear passive allpass ladder filter declared in filter.lib\n\n//nonlinear filter order\nnlfOrder = 6; \n\n//----------------------- Synthesis parameters computing and functions declaration ----------------------------\n\n//the number of modes depends on the preset being used\nnModes = nMode(preset);\n\ndelayLengthBase(f) = ma.SR/f;\n\n//delay lengths in number of samples\ndelayLength(x,f) = delayLengthBase(f)/modes(preset,x);\n\n//delay lines\ndelayLine(x,f) = de.delay(4096,delayLength(x,f));\n\n//Filter bank: fi.bandpass filters (declared in instrument.lib)\nradius = 1 - ma.PI*32/ma.SR;\nbandPassFilter(x,f) = instrument.bandPass(f*modes(preset,x),radius);\n\n//----------------------- Algorithm implementation ----------------------------\n\n//One resonance\nresonance(x,f,g) = + : + (excitation(preset,x,g)*select) : delayLine(x,f) : *(basegains(preset,x)) : bandPassFilter(x,f);\n\n}.process);","name":"STunedBar6","x":"261.9921875","y":"392.98828125","inputs":{"source":[]},"outputs":{"destination":["4"]},"params":{"sliders":[{"path":"/STunedBar6/tunedBars/0x00/Bar_0/Instrument_Hand","value":0},{"path":"/STunedBar6/tunedBars/0x00/Bar_1/Instrument_Hand","value":0},{"path":"/STunedBar6/tunedBars/0x00/Bar_2/Instrument_Hand","value":2},{"path":"/STunedBar6/tunedBars/0x00/Bar_3/Instrument_Hand","value":2},{"path":"/STunedBar6/tunedBars/0x00/Bar_4/Instrument_Hand","value":4},{"path":"/STunedBar6/tunedBars/0x00/Bar_5/Instrument_Hand","value":4}]},"acc":{"controles":[{"axis":"1","curve":"0","amin":"-10","amid":"0","amax":"18","adress":"/STunedBar6/tunedBars/0x00/Bar_0/Instrument_Hand","isEnabled":true},{"axis":"1","curve":"0","amin":"-10","amid":"0","amax":"18","adress":"/STunedBar6/tunedBars/0x00/Bar_1/Instrument_Hand","isEnabled":true},{"axis":"1","curve":"0","amin":"-10","amid":"0","amax":"14","adress":"/STunedBar6/tunedBars/0x00/Bar_2/Instrument_Hand","isEnabled":true},{"axis":"1","curve":"0","amin":"-10","amid":"0","amax":"14","adress":"/STunedBar6/tunedBars/0x00/Bar_3/Instrument_Hand","isEnabled":true},{"axis":"1","curve":"0","amin":"-10","amid":"0","amax":"10","adress":"/STunedBar6/tunedBars/0x00/Bar_4/Instrument_Hand","isEnabled":true},{"axis":"1","curve":"0","amin":"-10","amid":"0","amax":"10","adress":"/STunedBar6/tunedBars/0x00/Bar_5/Instrument_Hand","isEnabled":true}]}},"4":{"sceneName":"Big_Exemple","patchId":"4","code":"process = vgroup(\"Freeverb\",environment{declare name        \"freeverb\";\ndeclare version     \"1.0\";\ndeclare author      \"Grame\";\ndeclare license     \"BSD\";\ndeclare copyright   \"(c) GRAME 2006\";\ndeclare reference   \"https://ccrma.stanford.edu/~jos/pasp/Freeverb.html\";\n\nimport(\"stdfaust.lib\");\n\n/* Description : \n\n- Reverberation processor.\n- Head = maximum reverberation.\n\n*/ \n\nfreeverb = vgroup(\"Freeverb\", fxctrl(fixedgain, wetSlider, stereoReverb(combfeed, allpassfeed, dampSlider, stereospread)));\n\nprocess = _<: freeverb :>_;\n\n//======================================================\n//\n//                      Freeverb\n//        Faster version using fixed delays (20% gain)\n//\n//======================================================\n\n// Constant Parameters\n//--------------------\n\nfixedgain   = 0.015; //value of the gain of fxctrl\nscalewet    = 3.0;\nscaledry    = 2.0;\nscaledamp   = 0.4;\nscaleroom   = 0.28;\noffsetroom  = 0.7;\ninitialroom = 0.5;\ninitialdamp = 0.5;\ninitialwet  = 1.0/scalewet;\ninitialdry  = 0;\ninitialwidth= 1.0;\ninitialmode = 0.0;\nfreezemode  = 0.5;\nstereospread= 23;\nallpassfeed = 0.5; //feedback of the delays used in allpass filters\n\n// Filter Parameters\n//------------------\n\ncombtuningL1    = 1116;\ncombtuningL2    = 1188;\ncombtuningL3    = 1277;\ncombtuningL4    = 1356;\ncombtuningL5    = 1422;\ncombtuningL6    = 1491;\ncombtuningL7    = 1557;\ncombtuningL8    = 1617;\n\nallpasstuningL1 = 556;\nallpasstuningL2 = 441;\nallpasstuningL3 = 341;\nallpasstuningL4 = 225;\n\n// Control Sliders\n//--------------------\n// Damp : filters the high frequencies of the echoes (especially active for great values of RoomSize)\n// RoomSize : size of the reverberation room\n// Dry : original signal\n// Wet : reverberated signal\n\n//dampSlider      = hslider(\"Damp\",0.5, 0, 1, 0.025)*scaledamp;\n\ndampSlider \t\t= 0.7*scaledamp;\nroomsizeSlider  = hslider(\"Reverberation Room Size[acc:1 1 -10 0 10]\", 0.5, 0.1, 0.9, 0.025) : si.smooth(0.999) : min(0.9) :max(0.1) *scaleroom + offsetroom;\nwetSlider       = hslider(\"Reverberation Intensity[acc:1 1 -10 0 10]\", 0.3333, 0.1, 0.9, 0.025) : si.smooth(0.999) : min(0.9) :max(0.1);\ncombfeed        = roomsizeSlider;\n\n// Comb and Allpass filters\n//-------------------------\n\nallpass(dt,fb) = (_,_ <: (*(fb),_:+:@(dt)), -) ~ _ : (!,_);\n\ncomb(dt, fb, damp) = (+:@(dt)) ~ (*(1-damp) : (+ ~ *(damp)) : *(fb));\n\n// Reverb components\n//------------------\n\nmonoReverb(fb1, fb2, damp, spread)\n    = _ <:  comb(combtuningL1+spread, fb1, damp),\n            comb(combtuningL2+spread, fb1, damp),\n            comb(combtuningL3+spread, fb1, damp),\n            comb(combtuningL4+spread, fb1, damp),\n            comb(combtuningL5+spread, fb1, damp),\n            comb(combtuningL6+spread, fb1, damp),\n            comb(combtuningL7+spread, fb1, damp),\n            comb(combtuningL8+spread, fb1, damp)\n        +>\n            allpass (allpasstuningL1+spread, fb2)\n        :   allpass (allpasstuningL2+spread, fb2)\n        :   allpass (allpasstuningL3+spread, fb2)\n        :   allpass (allpasstuningL4+spread, fb2)\n        ;\n\nstereoReverb(fb1, fb2, damp, spread)\n    = + <:  monoReverb(fb1, fb2, damp, 0), monoReverb(fb1, fb2, damp, spread);\n\n// fxctrl : add an input gain and a wet-dry control to a stereo FX\n//----------------------------------------------------------------\n\nfxctrl(g,w,Fx) =  _,_ <: (*(g),*(g) : Fx : *(w),*(w)), *(1-w), *(1-w) +> _,_;\n}.process);","name":"Freeverb","x":"572.98828125","y":"322.98828125","inputs":{"source":["3"]},"outputs":{"destination":["output"]},"params":{"sliders":[{"path":"/Freeverb/Freeverb/Reverberation_Intensity","value":0.33329999446868896},{"path":"/Freeverb/Freeverb/Reverberation_Room_Size","value":0.5}]},"acc":{"controles":[{"axis":"1","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/Freeverb/Freeverb/Reverberation_Intensity","isEnabled":true},{"axis":"1","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/Freeverb/Freeverb/Reverberation_Room_Size","isEnabled":true}]}},"5":{"sceneName":"Big_Exemple","patchId":"5","code":"process = vgroup(\"InstrReverb\",environment{declare name \"InstrReverb\"; //instrument.lib\nimport(\"stdfaust.lib\");\n\n/* =========== DESCRIPTION =============\n\n- Reverberation\n- Head = Maximum Reverberation\n- Bottom = No reverberation\n\n*/\n\nprocess = _<: instrReverb:>_;\n\ninstrReverb = _,_ <: *(reverbGain),*(reverbGain),*(1 - reverbGain),*(1 - reverbGain) :\nre.zita_rev1_stereo(rdel,f1,f2,t60dc,t60m,fsmax),_,_ <: _,!,_,!,!,_,!,_ : +,+\n    with {\n       reverbGain = hslider(\"v:Reverb/Reverberation Volume[acc:1 1 -10 0 10]\",0.1,0.05,1,0.01) : si.smooth(0.999) : min(1) : max(0.05);\n       roomSize = hslider(\"v:Reverb/Reverberation Room Size[acc:1 1 -10 0 10]\", 0.1,0.05,2,0.01) : min(2) : max(0.05);\n       rdel = 20;\n       f1 = 200;\n       f2 = 6000;\n       t60dc = roomSize*3;\n       t60m = roomSize*2;\n       fsmax = 48000;\n    };\n}.process);","name":"InstrReverb","x":"826.9921875","y":"80.99609375","inputs":{"source":["2"]},"outputs":{"destination":["output"]},"params":{"sliders":[{"path":"/InstrReverb/Reverb/Reverberation_Room_Size","value":0.10000000149011612},{"path":"/InstrReverb/Reverb/Reverberation_Volume","value":0.10000000149011612}]},"acc":{"controles":[{"axis":"1","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/InstrReverb/Reverb/Reverberation_Room_Size","isEnabled":true},{"axis":"1","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/InstrReverb/Reverb/Reverberation_Volume","isEnabled":true}]}},"6":{"sceneName":"Big_Exemple","patchId":"6","code":"process = vgroup(\"WahWah\",environment{declare name \"WahWah\";\n\n/* ========== DESCRIPTION ===========\n\n- Wahwah effect\n- Head = no effect\n- Bottom = Maximum wahwah intensity\n- Rocking = varying the Wahwah effect\n\n*/\n\nimport(\"stdfaust.lib\");\n\nprocess = _<:_,ve.crybaby(wah):drywet\n\twith {\n   \t\twah = hslider(\"[1]Wah Wah[acc:0 1 -10 0 10]\", 0.6,0,1,0.01) : ba.automat(bps, 15, 0.0);\n   \t\tbps = hslider(\"[2]Speed[acc:0 1 -10 0 10]\", 540, 360, 780, 0.1):si.smooth(0.999):min(780):max(360):int;\n\t\tdrywet(x,y) = (1-c)*x + c*y;\n\t\tc = hslider(\"[3]Wah wah intensity[style:knob][unit:%][acc:1 0 -10 0 10]\", 60,0,100,0.01)*(0.01):si.smooth(0.999):min(1):max(0);\n    };\n}.process);","name":"WahWah","x":"985.99609375","y":"471.9921875","inputs":{"source":["1"]},"outputs":{"destination":["output"]},"params":{"sliders":[{"path":"/WahWah/Wah_Wah","value":0.6000000238418579},{"path":"/WahWah/Speed","value":540},{"path":"/WahWah/Wah_wah_intensity","value":60}]},"acc":{"controles":[{"axis":"0","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/WahWah/Wah_Wah","isEnabled":true},{"axis":"0","curve":"1","amin":"-10","amid":"0","amax":"10","adress":"/WahWah/Speed","isEnabled":true},{"axis":"1","curve":"0","amin":"-10","amid":"0","amax":"10","adress":"/WahWah/Wah_wah_intensity","isEnabled":true}]}}}