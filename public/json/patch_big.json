{"1":{"patchId":"1","code":"process = vgroup(\"Kisana\",environment{declare name \t\"Kisana\";\r\ndeclare author \"Yann Orlarey\";\r\n\r\n//Modifications GRAME July 2015\r\n\r\n/* ========= DESCRITPION =============\r\n\r\n- Kisana : 3-loops string instrument (based on Karplus-Strong)\r\n- Head = Silence\r\n- Tilt = High frequencies \r\n- Front = High + Medium frequencies\r\n- Bottom = High + Medium + Low frequencies\r\n- Left = Minimum brightness\r\n- Right = Maximum birghtness\r\n- Front = Long notes\r\n- Back = Short notes\r\n\r\n*/\r\n\r\nimport(\"music.lib\"); \r\n\r\nKEY = 60;\t// basic midi key\r\nNCY = 15; \t// note cycle length\r\nCCY = 15;\t// control cycle length\r\nBPS = 360;\t// general tempo (beat per sec)\r\n\r\n\r\nprocess = kisana; \r\n\r\n\r\n//-------------------------------kisana----------------------------------\r\n// USAGE: kisana : _,_;\r\n// \t\t3-loops string instrument\r\n//-----------------------------------------------------------------------\r\n\r\nkisana = vgroup(\"Kisana\", harpe(C,11,48), harpe(C,11,60), (harpe(C,11,72) : *(1.5), *(1.5)) \r\n\t:>*(l))\r\n\twith {\r\n\t\tl = -20 : db2linear;//hslider(\"[1]Volume\",-20, -60, 0, 0.01) : db2linear;\r\n\t\tC = hslider(\"[2]Brightness[acc:0 0 -10 0 10]\", 0.2, 0, 1, 0.01) : automat(BPS, CCY, 0.0);\r\n\t};\r\n \r\n\r\n\r\n//----------------------------------Harpe--------------------------------\r\n// USAGE: harpe(C,10,60) : _,_;\r\n//\t\tC is the filter coefficient 0..1\r\n// \t\tBuild a N (10) strings harpe using a pentatonic scale \r\n//\t\tbased on midi key b (60)\r\n//\t\tEach string is triggered by a specific\r\n//\t\tposition of the \"hand\"\r\n//-----------------------------------------------------------------------\r\nharpe(C,N,b) = \thand(b) <: par(i, N, position(i+1)\r\n\t\t\t\t\t\t\t: string(C,Penta(b).degree2Hz(i), att, lvl)\r\n\t\t\t\t\t\t\t: pan((i+0.5)/N) )\r\n\t\t\t\t \t:> _,_\r\n\twith {\r\n\t\tatt = hslider(\"[3]Resonance[acc:2 0 -10 0 12]\", 4, 0.1, 10, 0.01); \r\n\t\thand(48) = vslider(\"h:[1]Instrument Hands/1 (Note %b)[unit:pk][acc:1 1 -10 0 14]\", 0, 0, N, 1) : int : automat(120, CCY, 0.0);\r\n\t\thand(60) = vslider(\"h:[1]Instrument Hands/2 (Note %b)[unit:pk][acc:1 1 -10 0 14]\", 2, 0, N, 1) : int : automat(240, CCY, 0.0);\r\n\t\thand(72) = vslider(\"h:[1]Instrument Hands/3 (Note %b)[unit:pk][acc:1 1 -10 0 10]\", 4, 0, N, 1) : int : automat(480, CCY, 0.0);\r\n\t\t//lvl = vslider(\"h:loop/level\", 0, 0, 6, 1) : int : automat(BPS, CCY, 0.0) : -(6) : db2linear; \r\n\t\tlvl = 1;\r\n\t\tpan(p) = _ <: *(sqrt(1-p)), *(sqrt(p));\r\n\t\tposition(a,x) = abs(x - a) < 0.5;\r\n\t\tdb2linear(x)\t= pow(10, x/20.0);\r\n\r\n\t};\r\n\r\n\r\n//----------------------------------Penta-------------------------------\r\n// Pentatonic scale with degree to midi and degree to Hz conversion\r\n// USAGE: Penta(60).degree2midi(3) ==> 67 midikey\r\n// Penta(60).degree2Hz(4) ==> 440 Hz\r\n//-----------------------------------------------------------------------\r\n\r\nPenta(key) = environment {\r\n\r\n\tA4Hz = 440; \r\n\t\r\n\tdegree2midi(0) = key+0;\r\n\tdegree2midi(1) = key+2;\r\n\tdegree2midi(2) = key+4;\r\n\tdegree2midi(3) = key+7;\r\n\tdegree2midi(4) = key+9;\r\n\tdegree2midi(d) = degree2midi(d-5)+12;\r\n\t\r\n\tdegree2Hz(d) = A4Hz*semiton(degree2midi(d)-69) with { semiton(n) = 2.0^(n/12.0); };\r\n\r\n}; \r\n \r\n\r\n//----------------------------------String-------------------------------\r\n// A karplus-strong string.\r\n//\r\n// USAGE: string(440Hz, 4s, 1.0, button(\"play\"))\r\n// or\t button(\"play\") : string(440Hz, 4s, 1.0)\r\n//-----------------------------------------------------------------------\r\n\r\nstring(coef, freq, t60, level, trig) = noise*level\r\n\t\t\t\t\t\t\t: *(trig : trigger(freq2samples(freq)))\r\n\t\t\t\t\t\t\t: resonator(freq2samples(freq), att)\r\n\twith {\r\n\t\tresonator(d,a)\t= (+ : @(d-1)) ~ (average : *(a));\r\n\t\taverage(x)\t\t= (x*(1+coef)+x'*(1-coef))/2;\r\n\t\ttrigger(n) \t\t= upfront : + ~ decay(n) : >(0.0);\r\n\t\tupfront(x) \t\t= (x-x') > 0.0;\r\n\t\tdecay(n,x)\t\t= x - (x>0.0)/n;\r\n\t\tfreq2samples(f) = 44100.0/f;\r\n\t\tatt \t\t\t= pow(0.001,1.0/(freq*t60)); // attenuation coefficient\r\n\t\trandom \t\t= +(12345)~*(1103515245);\r\n\t\tnoise \t\t= random/2147483647.0;\r\n\t};\r\n\r\n \r\n}.process);","name":"Kisana","x":"165","y":"560","inputs":{"source":[]},"outputs":{"destination":["6"]},"params":{"sliders":[{"path":"/Kisana/Kisana/Instrument_Hands/1_(Note_48)","value":0},{"path":"/Kisana/Kisana/Instrument_Hands/2_(Note_60)","value":2},{"path":"/Kisana/Kisana/Instrument_Hands/3_(Note_72)","value":4},{"path":"/Kisana/Kisana/Brightness","value":0.20000000298023224},{"path":"/Kisana/Kisana/Resonance","value":4}]}},"2":{"patchId":"2","code":"process = vgroup(\"SAtonalSoftHarp\",environment{declare name \"Atonal Soft Harp\";\r\ndeclare author \"ER\"; //Adapted from NLFeks by Julius Smith and Romain Michon;\r\n\r\n\r\n/* =============== DESCRIPTION ======================== :\r\n\r\n- Soft Atonal Harp\r\n- Swing = Plucking all the strings one by one\r\n- Left = Slow rhythm /Low frequencies/ Silence\r\n- Right = Fast rhythm/ High frequencies\r\n- Back = Short and dry notes\r\n- Front = Long and bright notes\r\n\r\n\r\n*/\r\n\r\nimport(\"music.lib\"); // Define SR, delay\r\nimport(\"instrument.lib\");\r\nimport(\"effect.lib\"); // stereopanner\r\n\r\n//==================== INSTRUMENT =======================\r\n\r\nprocess = par(i, N, NFLeks(i)):>_;\r\n\r\nNFLeks(n) = filtered_excitation(n,P(freq(n)),freq(n)) : stringloop(freq(n));\r\n\r\n//==================== GUI SPECIFICATION ================\r\nN = 20;\r\nhand = hslider(\"h:[1]/Instrument Hand[acc:0 0 -10 0 10]\", 10, 0, N, 1) : automat(bps, 15, 0.0)// => gate\r\nwith{\r\nbps = hslider(\"h:[1]/Speed[style:knob][acc:0 0 -10 0 10]\", 480, 180, 720, 1):smooth(0.999) : min(720) : max(180) : int;\r\n};\r\ngain = 1;\r\n\r\npickangle = 0.9;\r\n\r\nbeta = 0.5;\r\n\r\n// String decay time in seconds:\r\nt60 = hslider(\"h:[2]Reverberation/ Resonance[unit:s][acc:2 0 -10 0 10]\", 5, 0.5, 10, 0.01):min(10):max(0.5); // -60db decay time (sec)\r\n\r\nB = 0;\r\nL = -10 : db2linear;\r\n\r\n//---------------------------------- FREQUENCY TABLE ---------------------------\r\n\r\nfreq(0) = 200;\r\nfreq(1) = 215;\r\nfreq(2) = 230;\r\nfreq(3) = 245;\r\nfreq(4) = 260;\r\nfreq(5) = 275;\r\n\r\nfreq(d)\t = freq(d-6)*(2);\t\r\n\t\r\n\r\n//==================== SIGNAL PROCESSING ================\r\n\r\n//----------------------- noiseburst -------------------------\r\n// White noise burst (adapted from Faust's karplus.dsp example)\r\n// Requires music.lib (for noise)\r\nnoiseburst(d,e) = noise : *(trigger(d,e))\r\nwith{\r\nupfront(x) = (x-x') > 0;\r\ndecay(n,x) = x - (x>0)/n;\r\nrelease(n) = + ~ decay(n);\r\nposition(d) = abs(hand - d) < 0.5;\r\ntrigger(d,n) = position(d) : upfront : release(n) : > (0.0);\r\n};\r\n\r\n\r\nP(f) = SR/f ; // fundamental period in samples\r\nPmax = 4096; // maximum P (for delay-line allocation)\r\n\r\nppdel(f) = beta*P(f); // pick position delay\r\npickposfilter(f) = ffcombfilter(Pmax,ppdel(f),-1); // defined in filter.lib\r\n\r\nexcitation(d,e) = noiseburst(d,e) : *(gain); // defined in signal.lib\r\n\r\nrho(f) = pow(0.001,1.0/(f*t60)); // multiplies loop-gain\r\n\r\n// Original EKS damping filter:\r\nb1 = 0.5*B; b0 = 1.0-b1; // S and 1-S\r\ndampingfilter1(f,x) = rho(f) * ((b0 * x) + (b1 * x'));\r\n\r\n// Linear phase FIR3 damping filter:\r\nh0 = (1.0 + B)/2; h1 = (1.0 - B)/4;\r\ndampingfilter2(f,x) = rho(f) * (h0 * x' + h1*(x+x''));\r\n\r\nloopfilter(f) = dampingfilter2(f); // or dampingfilter1\r\n\r\nfiltered_excitation(d,e,f) = excitation(d,e) : smooth(pickangle) \r\n\t\t : pickposfilter(f) : levelfilter(L,f); // see filter.lib\r\n\r\nstringloop(f) = (+ : fdelay4(Pmax, P(f)-2)) ~ (loopfilter(f));\r\n\r\n}.process);","name":"SAtonalSoftHarp","x":"131","y":"450","inputs":{"source":[]},"outputs":{"destination":["7"]},"params":{"sliders":[{"path":"/SAtonalSoftHarp/0x00/Instrument_Hand","value":10},{"path":"/SAtonalSoftHarp/0x00/Speed","value":480},{"path":"/SAtonalSoftHarp/Reverberation/Resonance","value":5}]}},"3":{"patchId":"3","code":"process = vgroup(\"SBird\",environment{declare name \"bird\";\r\ndeclare author \"Pierre Cochard\";\r\n\r\n//Modifications by Grame July 2014, June 2015;\r\n\r\n/* =============== DESCRIPTION ================= :\r\n\r\n- Bird singing generator.\r\n- Right = maximum speed of whistles.\r\n- Left = minimum speed/Rare birds, nearly silence.\r\n\r\n*/\r\n\r\nimport(\"music.lib\");\r\nimport(\"oscillator.lib\");\r\nimport(\"effect.lib\");\r\n\r\n// PROCESS - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \r\n\r\nprocess = hgroup(\"Bird\", mainOsc(noteTrig : rdm(72,94) : mtof , noteTrig) * envWrapper(noteTrig, ampEnv, amp_xp(2510)) : lowpass(1, 2500) *(0.8) <: _,_);\r\n\r\n// AUTO TRIGGER\r\n\r\nautoTrig = beat(t) * (abs(noise) <= p) : trigger(48) \r\n\twith {\r\n\t\tt = hslider(\"[1]Speed (Granulator)[style:knob][acc:0 0 -10 0 10]\", 240, 120, 480, 0.1) : smooth(0.999);\r\n\t\tp = hslider(\"[2]Probability (Granulator)[unit:%][style:knob][acc:0 0 -10 0 10]\", 50, 25, 100, 1)*(0.01) : smooth(0.999);\r\n\t\ttrigger(n) \t= upfront : release(n) : >(0.0) \r\n\t\twith {\r\n\t\t\tupfront(x) \t= (x-x') > 0.0;\r\n\t\t\tdecay(n,x)\t= x - (x>0.0)/n;\r\n\t\t\trelease(n)\t= + ~ decay(n);\r\n\t\t\t};\r\n\t\t};\r\n\r\n\r\n// BIRD TRIGGER\r\n\r\nnoteTrig = autoTrig;\r\n\r\n// OSCILLATORS - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \r\n\r\n/* base */\r\ncarrierOsc(freq) = osci(freq);\r\nmodOsc(freq) = triangleN(3,freq);\r\n\r\n/* fm oscillator */\r\nmainOsc(freq,trig) = freq <: +(*(harmRatio <: +(*(envWrapper(trig,harmEnv,harm_xp(1700))))) : modOsc : *(modIndex <: +(*(envWrapper(trig,modIndexEnv,modIndex_xp(550)))))) <: +(*(envWrapper(trig,freqEnv,freq_xp(943)))) : carrierOsc;\r\n\r\nenvWrapper(trig,env,sus) = trig : mstosamps(rdm(100,3000)), sus : hitLength : env;\r\n\r\n\r\n// FIXED PARAMETERS - - - - - - - - - - - - - - - - - - - - - - - - - - - \r\n\r\n/* fm */\r\nharmRatio = 0.063;\r\nmodIndex = 3.24;\r\n\r\n// TIME FUNCTIONS - - - - - - - - - - - - - - - - - - - - - - - - - - - - \r\n\r\nmetro(ms) = (%(+(1),mstosamps(ms))) ~_ : ==(1);\r\nmstosamps(ms) = ms : /(1000) * SR : int;\r\nrdmInc = _ <: @(1), @(2) : + : *(2994.2313) : int : +(38125); \r\nrdm(rdmin,rdmax) = _,(fmod(_,rdmax - rdmin : int) ~ rdmInc : +(rdmin)) : gater : -(1) : abs;\r\ngater = (_,_,_ <: !,_,!,_,!,!,!,!,_ : select2) ~_;\r\n\r\n// MIDI RELATED - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \r\n\r\n/* midi pitch */ \r\nmtof(midinote) = pow(2,(midinote - 69) / 12) * 440;\r\n\r\n// ENVELOPPES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \r\n\r\n/* envelope \"reader\" (phaser) */\r\n\r\nhitLength(length,sustain) = *((==(length,@(length,1))), +(1))~_ <: gater(<(sustain));\r\n\r\n/* amplitude envelope */\r\n\r\nampEnvbpf = bpf.start(0, 0) : \r\n\tbpf.point(amp_xp(60.241), 1.) : \r\n\tbpf.point(amp_xp(461.847), 0.) :\r\n\tbpf.point(amp_xp(582.329), 0.928) : \r\n\tbpf.point(amp_xp(682.731), 0.5) : \r\n\tbpf.point(amp_xp(983.936), 0.) : \r\n\tbpf.point(amp_xp(1064.257), 0.) : \r\n\tbpf.point(amp_xp(1345.382), 0.) : \r\n\tbpf.point(amp_xp(1526.105), 0.) : \r\n\tbpf.point(amp_xp(1746.988), 0.) : \r\n\tbpf.point(amp_xp(1827.309), 0.) : \r\n\tbpf.point(amp_xp(2088.353), 0.) : \r\n\tbpf.point(amp_xp(2188.755), 0.) : /* sustain point */\r\n\tbpf.end(amp_xp(2510.040), 0.);\r\n\r\nampEnv = ampEnvbpf : smooth(0.999) : lowpass(1, 3000);\r\namp_xp(x) = x * SR / 1000. * ampEnv_speed;\r\nampEnv_speed = noteTrig : rdm(0,2000) : /(1000);\r\n\r\n/* freq envelope */\r\n\r\nfreqEnvbpf = bpf.start(0, 0) : \r\n\tbpf.point(freq_xp(147.751), 1.) : \r\n\tbpf.point(freq_xp(193.213), 0.) : \r\n\tbpf.point(freq_xp(318.233), yp) : \r\n\tbpf.point(freq_xp(431.888), 0.) : \r\n\tbpf.point(freq_xp(488.715), 0.434) : \r\n\tbpf.point(freq_xp(613.735), yp) : \r\n\tbpf.point(freq_xp(659.197), 1.) : \r\n\tbpf.point(freq_xp(716.024), yp) : \r\n\tbpf.point(freq_xp(806.948), 1.) : \r\n\tbpf.point(freq_xp(829.679), yp) : /* sustain point */\r\n\tbpf.end(freq_xp(943.333), 0.);\r\n\r\nfreqEnv = freqEnvbpf : smooth(0.999) : lowpass(1, 3000);\r\nfreq_xp(x) = x * SR / 1000. * freqEnv_speed;\r\nfreqEnv_speed = noteTrig : rdm(0,2000) : /(1000);\r\nyp = noteTrig : rdm(0,1000) : /(1000);\r\n\r\n/* harmRatio envelope */\r\n\r\nharmEnvbpf = bpf.start(0, 0.) : \r\n\tbpf.point(harm_xp(863.454), 0.490) : \r\n\tbpf.point(harm_xp(865), 0.) : \r\n\tbpf.point (harm_xp(1305.221), 1.) : \r\n\tbpf.point(harm_xp(1646.586), 0.) : /* sustain point */\r\n\tbpf.end(harm_xp(1700), 0.);\r\n\r\nharmEnv = harmEnvbpf : smooth(0.999) : lowpass(1, 3000);\r\nharm_xp(x) = x * SR / 1000. * harmEnv_speed;\r\nharmEnv_speed = noteTrig : rdm(0,2000) : /(1000);\r\n\r\n/* modIndex envelope */\r\n\r\nmodIndexEnvbpf = bpf.start(0, 0.) : \r\n\tbpf.point(modIndex_xp(240.964), 0.554) : \r\n\tbpf.point(modIndex_xp(502.068), 0.) : /* sustain point */\r\n\tbpf.end(modIndex_xp(550), 0.);\r\n\r\nmodIndexEnv = modIndexEnvbpf : smooth(0.999) : lowpass(1, 3000);\r\nmodIndex_xp(x) = x * SR / 1000. * modIndexEnv_speed;\r\nmodIndexEnv_speed = noteTrig : rdm(0,2000) : /(1000);\r\n\r\n\r\n}.process);","name":"SBird","x":"171","y":"319","inputs":{"source":[]},"outputs":{"destination":["10"]},"params":{"sliders":[{"path":"/SBird/Bird/Speed_(Granulator)","value":240},{"path":"/SBird/Bird/Probability_(Granulator)","value":50}]}},"4":{"patchId":"4","code":"process = vgroup(\"SBlowhistleBottle\",environment{declare name \"Blowhistle Bottle\";\r\ndeclare author \"ER\"; //From \"Blow bottle\" by Romain Michon;\r\ndeclare version \"1.0\";\r\ndeclare licence \"STK-4.3\"; // Synthesis Tool Kit 4.3 (MIT style license);\r\ndeclare description \"This object implements a helmholtz resonator (biquad filter) with a polynomial jet excitation (a la Cook).\";\r\n\r\n/* =============== DESCRIPTION ================= :\r\n\r\n- Blow bottles with whistling echo.\r\n- Left : silence/dying echo.\r\n- Front : single blow bottle.\r\n- Back : maximum whistling echo\r\n- Bottom : bottle + whistling echo \r\n- Rocking : changes tone of blow bottle. \r\n\r\n*/\r\n\r\nimport(\"math.lib\");\r\nimport(\"music.lib\");\r\nimport(\"instrument.lib\");\r\nimport(\"filter.lib\");\r\n\r\n//==================== INSTRUMENT =======================\r\n\r\nprocess = vgroup(\"Blowhistle Bottles\", par(i, N, blow(i)) :>_);\r\n\r\nblow(n)= par(i, 2, \r\n\t//differential pressure\r\n\t(-(breathPressure(trigger(n))) <: \r\n\t((+(1))*randPressure((trigger(n))) : +(breathPressure(trigger(n)))) - *(jetTable),_ : baPaF(i,n),_)~_: !,_: \r\n\t//signal scaling\r\n\tdcblocker*envelopeG(trigger(n))*(0.5)<:+(voice(i,n))*resonGain(i)):>_\r\n\twith{\r\n\t\t\tbaPaF(0,n) = bandPassFilter(freq(n));\r\n\t\t\tbaPaF(1,n) = bandPassFilter(freq(n)*8);\r\n\t\t\tvoice(0,n) = 0*n;\r\n\t\t\tvoice(1,n) = 1*(resonbp(freq(n)*8,Q,gain):echo);\r\n\t\t\tresonGain(0) = 1;\r\n\t\t\tresonGain(1) =(hslider(\"v:[1]Instrument/Whistle Volume[acc:2 0 -10 0 10]\", 0.07, 0, 0.2, 0.001))^2:smooth(0.999);\r\n\r\n\t\t\techo = _:+~(@(delayEcho):*(feedback));\r\n\t\t\tdelayEcho = 44100;\r\n\t\t\tfeedback = hslider(\"h:[2]Echo/Echo Intensity [style:knob][acc:2 0 -10 0 10]\", 0.48, 0.2, 0.98, 0.01):smooth(0.999):min(0.98):max(0.2);\r\n\t\t\t};\r\n\r\n//==================== GUI SPECIFICATION ================\r\nN = 10;\r\nQ = 30;\r\nposition(n) = abs(hand - n) < 0.5;\r\nhand = hslider(\"v:[1]Instrument/Instrument Hand[acc:0 0 -10 0 10]\", 5, 0, N, 1):int:automat(360, 15, 0.0);\r\nenvelopeAttack = 0.01;\r\nvibratoFreq = 5;\r\nvibratoGain = 0.1;\r\n\r\n\r\n//--------------------- Non-variable Parameters -------------\r\n\r\ngain = 0.5;\r\nnoiseGain = 0.5;\r\npressure = 1;\r\nvibratoBegin = 0.05;\r\nvibratoAttack = 0.5;\r\nvibratoRelease = 0.01;\r\nenvelopeDecay = 0.01;\r\nenvelopeRelease = 0.5;\r\n\r\n//----------------------- Frequency Table --------------------\r\n\r\nfreq(0) = 130.81;\r\nfreq(1) = 146.83;\r\nfreq(2) = 164.81;\r\nfreq(3) = 195.99;\r\nfreq(4) = 220.00;\r\n\r\nfreq(d)\t = freq(d-5)*2;\r\n\r\n//==================== SIGNAL PROCESSING ================\r\n\r\n//----------------------- Synthesis parameters computing and functions declaration ----------------------------\r\n\r\n//botlle radius\r\nbottleRadius = 0.999;\r\n\r\nbandPassFilter(f) = bandPass(f,bottleRadius);\r\n\r\n//----------------------- Algorithm implementation ----------------------------\r\n\r\n//global envelope is of type attack - decay - sustain - release\r\nenvelopeG(t) = gain*adsr(gain*envelopeAttack,envelopeDecay,80,envelopeRelease,t);\r\n\r\n//pressure envelope is also ADSR\r\nenvelope(t) = pressure*adsr(gain*0.02,0.01,80,gain*0.2,t);\r\n\r\n//vibrato\r\nvibrato(t) = osc(vibratoFreq)*vibratoGain*envVibrato(vibratoBegin,vibratoAttack,100,vibratoRelease,t)*osc(vibratoFreq);\r\n\r\n//breat pressure\r\nbreathPressure(t) = envelope(t) + vibrato(t);\r\n\r\n//breath noise\r\nrandPressure(t) = noiseGain*noise*breathPressure(t) ;\r\n\r\n//------------------------- Enveloppe Trigger --------------------------------------------\r\n\r\ntrigger(n) = position(n): trig\r\n\twith{\r\n\tupfront(x) \t= (x-x') > 0;\r\n\tdecay(n,x)\t= x - (x>0.0)/n;\r\n\trelease(n)\t= + ~ decay(n);\r\n\ttrig = upfront : release(8820) : >(0.0);\r\n\t};\r\n\r\n\r\n\t}.process);","name":"SBlowhistleBottle","x":"167","y":"206","inputs":{"source":[]},"outputs":{"destination":["9"]},"params":{"sliders":[{"path":"/SBlowhistleBottle/Blowhistle_Bottles/Instrument/Instrument_Hand","value":5},{"path":"/SBlowhistleBottle/Blowhistle_Bottles/Instrument/Whistle_Volume","value":0.07000000029802322},{"path":"/SBlowhistleBottle/Blowhistle_Bottles/Echo/Echo_Intensity","value":0.47999998927116394}]}},"5":{"patchId":"5","code":"process = vgroup(\"SBouncyHarp\",environment{declare name \"Bouncy Harp\";\r\ndeclare author \"ER\"; //From Nonlinear EKS by Julius Smith and Romain Michon;\r\n\r\n/* =============== DESCRIPTION ================= :\r\n\r\nDo not hesitate to make swift and abrupt gestures.\r\n- Head : Silence\r\n- Swing : To pluck the strings of the harp.\r\n- Fishing rod with abrupt stop in Head position : bouncing string effect.\r\n- Frying Pan and Tennis Racket : to pluck a single bouncing string.\r\n\r\n*/\r\n\r\nimport(\"music.lib\"); // Define SR, delay\r\nimport(\"instrument.lib\");\r\nimport(\"effect.lib\"); // stereopanner\r\n\r\n//==================== INSTRUMENT =======================\r\n\r\nprocess = par(i, N, NLFeks(i)):>_;\r\n\r\nNLFeks(n) = filtered_excitation(n,P(octave(n)),octave(n)) : stringloop(octave(n));\r\n \t\t\t\t\t\t\t\t\t\t\t\t\r\n\r\n//==================== GUI SPECIFICATION ================\r\n\r\nN = 15;\r\nhand = hslider(\"[1]Instrument Hand [acc:1 1 -8 0 11]\", 0, 0, N, 1);// => gate\r\ngain = 1;\r\nreverse = select2(_, 1, 0);\r\npickangle = 0.9 * hslider(\"[3]Dry/Soft Strings[acc:2 0 -10 0 10]\", 0.45,0,0.9,0.1);\r\n\r\nbeta = hslider(\"[4]Picking Position [acc:2 0 -10 0 10]\", 0.13, 0.02, 0.5, 0.01);\r\nt60 = hslider(\"[5]Resonance (InstrReverb)[acc:1 0 -10 0 10]\", 5, 0.5, 10, 0.01); // -60db decay time (sec)\r\n\r\nB = 0.5;\r\nL = -10 : db2linear;\r\n\r\n//---------------------------------- FREQUENCY TABLE ---------------------------\r\n\r\nfreq(0) = 115;\r\nfreq(1) = 130;\r\nfreq(2) = 145;\r\nfreq(3) = 160;\r\nfreq(4) = 175;\r\n\r\nfreq(d)\t = freq(d-5)*(2);\r\noctave(d) = freq(d) * hslider(\"Hight[acc:2 0 -10 0 10]\", 3, 1, 6, 0.1) : smooth(0.999);\t\r\n\t\r\n\r\n//==================== SIGNAL PROCESSING ================\r\n\r\n//----------------------- noiseburst -------------------------\r\n// White noise burst (adapted from Faust's karplus.dsp example)\r\n// Requires music.lib (for noise)\r\nnoiseburst(d,e) = noise : *(trigger(d,e))\r\nwith{\r\nupfront(x) = (x-x') > 0;\r\ndecay(n,x) = x - (x>0)/n;\r\nrelease(n) = + ~ decay(n);\r\nposition(d) = abs(hand - d) < 0.5;\r\ntrigger(d,n) = position(d) : upfront : release(n) : > (0.0);\r\n};\r\n\r\n\r\nP(f) = SR/f ; // fundamental period in samples\r\nPmax = 4096; // maximum P (for delay-line allocation)\r\n\r\nppdel(f) = beta*P(f); // pick position delay\r\npickposfilter(f) = ffcombfilter(Pmax,ppdel(f),-1); // defined in filter.lib\r\n\r\nexcitation(d,e) = noiseburst(d,e) : *(gain); // defined in signal.lib\r\n\r\nrho(f) = pow(0.001,1.0/(f*t60)); // multiplies loop-gain\r\n\r\n// Original EKS damping filter:\r\nb1 = 0.5*B; b0 = 1.0-b1; // S and 1-S\r\ndampingfilter1(f,x) = rho(f) * ((b0 * x) + (b1 * x'));\r\n\r\n// Linear phase FIR3 damping filter:\r\nh0 = (1.0 + B)/2; h1 = (1.0 - B)/4;\r\ndampingfilter2(f,x) = rho(f) * (h0 * x' + h1*(x+x''));\r\n\r\nloopfilter(f) = dampingfilter2(f); // or dampingfilter1\r\n\r\nfiltered_excitation(d,e,f) = excitation(d,e) : smooth(pickangle) \r\n\t\t : pickposfilter(f) : levelfilter(L,f); // see filter.lib\r\n\r\n\r\nstringloop(f) = (+ : fdelay4(Pmax, P(f)-2)) ~ (loopfilter(f));// : NLFM(f));\r\n\r\n}.process);","name":"SBouncyHarp","x":"146","y":"77","inputs":{"source":[]},"outputs":{"destination":["8"]},"params":{"sliders":[{"path":"/SBouncyHarp/Hight","value":3},{"path":"/SBouncyHarp/Instrument_Hand","value":0},{"path":"/SBouncyHarp/Dry/Soft_Strings","value":0.44999998807907104},{"path":"/SBouncyHarp/Picking_Position","value":0.12999999523162842},{"path":"/SBouncyHarp/Resonance_(InstrReverb)","value":5}]}},"6":{"patchId":"6","code":"process = vgroup(\"CombFilter\",environment{declare name \"Comb Filter\";\r\n\r\n/* =========== DESCRIPTION ==============\r\n\r\n- A comb filter creates interferences in a sound\r\n- Rocking = to change the filtering frequency\r\n- Head = no filter\r\n- Bottom = maximum filtering\r\n\r\n*/\r\n\r\nimport(\"math.lib\");\r\nimport(\"music.lib\");\r\nimport(\"filter.lib\");\r\n\r\nprocess = fb_fcomb(maxdel,del,b0,aN) \r\n\t\t\twith {\r\n\t\t\t\tmaxdel = 1<<16; \r\n\t\t\t\tfreq = 1/(hslider(\"Frequency[acc:0 0 -10 0 10]\", 2500,100,20000,0.001)):smooth(0.99);\r\n\t\t\t\tdel = freq *(SR) : smooth(0.99);\r\n\t\t\t\tb0 = 1;\r\n\t\t\t\taN = hslider(\"Intensity[acc:1 1 -10 0 10]\", 80,0,100,0.01)*(0.01):smooth(0.99):min(0.999):max(0);\r\n\t\t\t};\r\n\t\t\t\r\n}.process);","name":"CombFilter","x":"740","y":"460","inputs":{"source":["1"]},"outputs":{"destination":["output"]},"params":{"sliders":[{"path":"/CombFilter/Frequency","value":2500},{"path":"/CombFilter/Intensity","value":80}]}},"7":{"patchId":"7","code":"process = vgroup(\"Echo\",environment{declare name \"Echo\";\r\n\r\nimport(\"math.lib\");\r\nimport(\"music.lib\");\r\nimport(\"filter.lib\");\r\n\r\n/* ============ DESCRIPTION =============\r\n\r\n- Variable delay echo\r\n- Echo Delay = Pick manually which amount of time in seconds must be repeated by the echo\r\n- Rocking = To vary the intensity of the echo\r\n\r\n*/\r\n\r\nprocess = echo;\r\n\r\n\r\necho = +~ @(echoDelay)*(feedback);\r\nsmooth(s) = *(1.0 - s) : + ~ *(s);\r\n\r\nechoDelay = hslider(\"Echo Delay[unit:s]\", 0.5, 0.01, 1, 0.001):min(1):max(0.01)*(44100):int;\r\nfeedback = hslider(\"Echo Intensity (Feedback)[style:knob][acc:0 0 -10 0 10]\", 0.001, 0.001, 0.65, 0.001):smooth(0.999);\r\n}.process);","name":"Echo","x":"788","y":"347","inputs":{"source":["2"]},"outputs":{"destination":["output"]},"params":{"sliders":[{"path":"/Echo/Echo_Delay","value":0.5},{"path":"/Echo/Echo_Intensity_(Feedback)","value":0.0010000000474974513}]}},"8":{"patchId":"8","code":"process = vgroup(\"Flanger\",environment{declare name \"Flanger\";\r\n\r\nimport(\"effect.lib\");//flanger_demo\r\nimport(\"filter.lib\");\r\nimport(\"music.lib\");\r\n\r\n/* =========== DESCRIPTION ==========\r\n\r\n- Flanger effect\r\n- Head = No effect\r\n- Bottom = Maximum Intensity and Amplitude\r\n- Left = Slow Flanging\r\n- Right = Maximum Speed\r\n\r\n*/\r\n\r\nprocess = _<:_,(_<:FlangerDemo:>*(0.1)):drywet;\r\n\r\n\r\nFlangerDemo = flanger_stereo_demo with {\r\n flanger_group(x) =\r\n vgroup(\"FLANGER [tooltip: Reference: https://ccrma.stanford.edu/~jos/pasp/Flanging.html]\", x);\r\n ctl_group(x) = flanger_group(hgroup(\"[1]\", x));\r\n\r\n invert = 0;// meter_group(checkbox(\"[1] Invert Flange Sum\"));\r\n\r\n flanger_stereo_demo(x,y) = x,y : flanger_stereo(dmax,curdel1,curdel2,depth,fb,invert);\r\n\r\n lfol = component(\"oscillator.lib\").oscrs; // sine for left channel\r\n lfor = component(\"oscillator.lib\").oscrc; // cosine for right channel\r\n dmax = 2048;\r\n dflange = 0.001 * SR * 10;\r\n odflange = 0.001 * SR * 1;\r\n freq = ctl_group(hslider(\"[1] Speed [acc:0 0 -10 0 10][unit:Hz] [style:knob]\", 3, 0, 10, 0.01));\r\n depth = 1;\r\n fb = 0.99;\r\n curdel1 = odflange+dflange*(1 + lfol(freq))/2;\r\n curdel2 = odflange+dflange*(1 + lfor(freq))/2;\r\n};\r\n\r\ndrywet(x,y) \t= (1-c)*x + c*y\r\n\t\t\t\twith {\r\n\t\t\t\t\tc = hslider(\"[3] Flanger Intensity [unit:%][acc:1 1 -10 0 10]\", 10,0,100,0.01)*(0.01):smooth(0.999);\r\n\t\t\t\t\t};\r\n}.process);","name":"Flanger","x":"759","y":"251","inputs":{"source":["5"]},"outputs":{"destination":["output"]},"params":{"sliders":[{"path":"/Flanger/FLANGER/0x00/Speed","value":3},{"path":"/Flanger/Flanger_Intensity","value":10}]}},"9":{"patchId":"9","code":"process = vgroup(\"Freeverb\",environment{declare name \"freeverb\";\r\ndeclare version \"1.0\";\r\ndeclare author \"Grame\";\r\ndeclare license \"BSD\";\r\ndeclare copyright \"(c) GRAME 2006\";\r\ndeclare reference \"https://ccrma.stanford.edu/~jos/pasp/Freeverb.html\";\r\n\r\nimport(\"music.lib\");\r\nimport(\"filter.lib\");\r\n\r\n\r\n\r\n/* Description : \r\n\r\n- Reverberation processor.\r\n- Head = maximum reverberation.\r\n\r\n*/ \r\n\r\nfreeverb = vgroup(\"Freeverb\", fxctrl(fixedgain, wetSlider, stereoReverb(combfeed, allpassfeed, dampSlider, stereospread)));\r\n\r\nprocess = _<: freeverb :>_;\r\n\r\n//======================================================\r\n//\r\n// Freeverb\r\n// Faster version using fixed delays (20% gain)\r\n//\r\n//======================================================\r\n\r\n// Constant Parameters\r\n//--------------------\r\n\r\nfixedgain = 0.015; //value of the gain of fxctrl\r\nscalewet = 3.0;\r\nscaledry = 2.0;\r\nscaledamp = 0.4;\r\nscaleroom = 0.28;\r\noffsetroom = 0.7;\r\ninitialroom = 0.5;\r\ninitialdamp = 0.5;\r\ninitialwet = 1.0/scalewet;\r\ninitialdry = 0;\r\ninitialwidth= 1.0;\r\ninitialmode = 0.0;\r\nfreezemode = 0.5;\r\nstereospread= 23;\r\nallpassfeed = 0.5; //feedback of the delays used in allpass filters\r\n\r\n\r\n// Filter Parameters\r\n//------------------\r\n\r\ncombtuningL1 = 1116;\r\ncombtuningL2 = 1188;\r\ncombtuningL3 = 1277;\r\ncombtuningL4 = 1356;\r\ncombtuningL5 = 1422;\r\ncombtuningL6 = 1491;\r\ncombtuningL7 = 1557;\r\ncombtuningL8 = 1617;\r\n\r\nallpasstuningL1 = 556;\r\nallpasstuningL2 = 441;\r\nallpasstuningL3 = 341;\r\nallpasstuningL4 = 225;\r\n\r\n\r\n// Control Sliders\r\n//--------------------\r\n// Damp : filters the high frequencies of the echoes (especially active for great values of RoomSize)\r\n// RoomSize : size of the reverberation room\r\n// Dry : original signal\r\n// Wet : reverberated signal\r\n\r\n//dampSlider = hslider(\"Damp\",0.5, 0, 1, 0.025)*scaledamp;\r\n\r\ndampSlider \t\t= 0.7*scaledamp;\r\nroomsizeSlider = hslider(\"Reverberation Room Size[acc:1 0 -10 0 10]\", 0.5, 0.1, 0.9, 0.025) : smooth(0.999) : min(0.9) :max(0.1) *scaleroom + offsetroom;\r\nwetSlider = hslider(\"Reverberation Intensity[acc:1 0 -10 0 10]\", 0.3333, 0.1, 0.9, 0.025) : smooth(0.999) : min(0.9) :max(0.1);\r\ncombfeed = roomsizeSlider;\r\n\r\n\r\n// Comb and Allpass filters\r\n//-------------------------\r\n\r\nallpass(dt,fb) = (_,_ <: (*(fb),_:+:@(dt)), -) ~ _ : (!,_);\r\n\r\ncomb(dt, fb, damp) = (+:@(dt)) ~ (*(1-damp) : (+ ~ *(damp)) : *(fb));\r\n\r\n\r\n// Reverb components\r\n//------------------\r\n\r\nmonoReverb(fb1, fb2, damp, spread)\r\n = _ <: comb(combtuningL1+spread, fb1, damp),\r\n comb(combtuningL2+spread, fb1, damp),\r\n comb(combtuningL3+spread, fb1, damp),\r\n comb(combtuningL4+spread, fb1, damp),\r\n comb(combtuningL5+spread, fb1, damp),\r\n comb(combtuningL6+spread, fb1, damp),\r\n comb(combtuningL7+spread, fb1, damp),\r\n comb(combtuningL8+spread, fb1, damp)\r\n +>\r\n allpass (allpasstuningL1+spread, fb2)\r\n : allpass (allpasstuningL2+spread, fb2)\r\n : allpass (allpasstuningL3+spread, fb2)\r\n : allpass (allpasstuningL4+spread, fb2)\r\n ;\r\n\r\nstereoReverb(fb1, fb2, damp, spread)\r\n = + <: monoReverb(fb1, fb2, damp, 0), monoReverb(fb1, fb2, damp, spread);\r\n\r\n\r\n// fxctrl : add an input gain and a wet-dry control to a stereo FX\r\n//----------------------------------------------------------------\r\n\r\nfxctrl(g,w,Fx) = _,_ <: (*(g),*(g) : Fx : *(w),*(w)), *(1-w), *(1-w) +> _,_;\r\n}.process);","name":"Freeverb","x":"748","y":"151","inputs":{"source":["4"]},"outputs":{"destination":["output"]},"params":{"sliders":[{"path":"/Freeverb/Freeverb/Reverberation_Intensity","value":0.33329999446868896},{"path":"/Freeverb/Freeverb/Reverberation_Room_Size","value":0.5}]}},"10":{"patchId":"10","code":"process = vgroup(\"Granulator\",environment{declare name \"Granulator\";\r\ndeclare author \"Adapted from sfIter by Christophe Lebreton\";\r\n\r\n/* =========== DESCRITPTION =============\r\n\r\n- The granulator takes very small parts of a sound, called GRAINS, and plays them at a varying speed\r\n- Front = Medium size grains\r\n- Back = short grains\r\n- Left Slow rhythm\r\n- Right = Fast rhythm\r\n- Bottom = Regular occurrences\r\n- Head = Irregular occurrences \r\n*/\r\n\r\nimport(\"music.lib\"); \t// Define SR, delay \r\nimport(\"filter.lib\"); \t// smooth, ffcombfilter,fdelay4\r\nimport(\"effect.lib\"); \t// stereopanner\r\nimport(\"reduce.lib\"); // amp_follower\r\n\r\n\r\nprocess = hgroup(\"Granulator\", *(excitation : ampf));\r\n\r\nexcitation = noiseburst(gate,P) * (gain);\r\nampf = amp_follower_ud(duree_env,duree_env);\r\n\r\n//----------------------- NOISEBURST ------------------------- \r\n\r\nnoiseburst(gate,P) = noise : *(gate : trigger(P))\r\n\twith { \r\n\tupfront(x) = (x-x') > 0; \r\n\tdecay(n,x) = x - (x>0)/n; \r\n\trelease(n) = + ~ decay(n); \r\n\ttrigger(n) = upfront : release(n) : > (0.0);\r\n\t};\r\n\t\r\nP = freq; // fundamental period in samples \r\nPmax = 4096; // maximum P (for delay-line allocation)\r\n\r\ngate = phasor_bin(1) :-(0.001):pulsar;\r\ngain = 1;\r\nfreq = hslider(\"[1]Grain Size[style:knob][acc:2 0 -10 0 10]\", 200,5,2205,1);\r\n// la fréquence donne la largeur de bande extraite du bruit blanc\r\n\r\n// PHASOR_BIN //////////////////////////////\r\nphasor_bin (init) = (+(float(speed)/float(SR)) : fmod(_,1.0)) ~ *(init);\r\n\t\t\t\t\t\t\r\n// PULSAR //////////////////////////////\r\n//Le pulsar permet de créer une 'pulsation' plus ou moins aléatoire (proba).\r\n\r\npulsar = _<:((_<(ratio_env)):@(100))*(proba>(_,abs(noise):latch)); \r\nspeed = hslider (\"[2]Speed[unit:Hz][style:knob][acc:0 0 -10 0 10]\", 10,1,20,0.0001):lowpass(1,1); \r\nratio_env = 0.5;\r\nfade = (0.5); // min > 0 pour eviter division par 0\r\nproba = hslider (\"[3]Probability[unit:%][style:knob][acc:1 1 -10 0 10]\", 70,50,100,1) * (0.01):lowpass(1,1);\r\nduree_env = 1/(speed: / (ratio_env*(0.25)*fade));}.process);","name":"Granulator","x":"733","y":"61","inputs":{"source":["3"]},"outputs":{"destination":["output"]},"params":{"sliders":[{"path":"/Granulator/Granulator/Grain_Size","value":200},{"path":"/Granulator/Granulator/Speed","value":10},{"path":"/Granulator/Granulator/Probability","value":70}]}}}