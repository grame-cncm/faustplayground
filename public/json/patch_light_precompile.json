{"1":{"patchId":"1","code":"process = vgroup(\"Echo\",environment{declare name \"Echo\";\r\n\r\nimport(\"math.lib\");\r\nimport(\"music.lib\");\r\nimport(\"filter.lib\");\r\n\r\n/* ============ DESCRIPTION =============\r\n\r\n- Variable delay echo\r\n- Echo Delay = Pick manually which amount of time in seconds must be repeated by the echo\r\n- Rocking = To vary the intensity of the echo\r\n\r\n*/\r\n\r\nprocess = echo;\r\n\r\n\r\necho = +~ @(echoDelay)*(feedback);\r\nsmooth(s) = *(1.0 - s) : + ~ *(s);\r\n\r\nechoDelay = hslider(\"Echo Delay[unit:s]\", 0.5, 0.01, 1, 0.001):min(1):max(0.01)*(44100):int;\r\nfeedback = hslider(\"Echo Intensity (Feedback)[style:knob][acc:0 0 -10 0 10]\", 0.001, 0.001, 0.65, 0.001):smooth(0.999);\r\n}.process);","name":"Echo","x":"544","y":"169","inputs":{"source":["2"]},"outputs":{"destination":["3"]},"params":{"sliders":[{"path":"/Echo/Echo_Delay","value":0.5},{"path":"/Echo/Echo_Intensity_(Feedback)","value":0.0010000000474974513}]},"factory":{"name":"mydsp1","code":"/* ------------------------------------------------------------name: \"Echo\"Code generated with Faust 2.0.a41 (http://faust.grame.fr)------------------------------------------------------------ */function mydsp1Module(global, foreign, buffer) {'use asm';var HEAP32 = new global.Int32Array(buffer);var HEAPF32 = new global.Float32Array(buffer);var imul = global.Math.imul;var log = global.Math.log;var max = global.Math.max;var min = global.Math.min;function fmodf(x, y) { x = +x; y = +y; return +(x % y); }function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }function getNumInputs(dsp) {dsp = dsp | 0;return 1;}function getNumOutputs(dsp) {dsp = dsp | 0;return 1;}function classInit(dsp, samplingFreq) {dsp = dsp | 0;samplingFreq = samplingFreq | 0;}function instanceInit(dsp, samplingFreq) {dsp = dsp | 0;samplingFreq = samplingFreq | 0;var i0 = 0;var i1 = 0;HEAP32[dsp + 262164 >> 2] = (samplingFreq | 0);HEAPF32[dsp + 262152 >> 2] = +(0.001);for (i0 = 0; (((i0 | 0) < 2) | 0); i0 = (((i0 | 0) + 1) | 0)) {HEAPF32[dsp + 262144 + ((i0 | 0) << 2) >> 2] = 0.;}HEAPF32[dsp + 262156 >> 2] = +(0.5);HEAP32[dsp + 262160 >> 2] = 0;for (i1 = 0; (((i1 | 0) < 65536) | 0); i1 = (((i1 | 0) + 1) | 0)) {HEAPF32[dsp + 0 + ((i1 | 0) << 2) >> 2] = 0.;}}function init(dsp, samplingFreq) {dsp = dsp | 0;samplingFreq = samplingFreq | 0;classInit(dsp, samplingFreq);instanceInit(dsp, samplingFreq);}function setValue(dsp, offset, value) {dsp = dsp | 0;offset = offset | 0;value = +value;HEAPF32[dsp + offset >> 2] = value;}function getValue(dsp, offset) {dsp = dsp | 0;offset = offset | 0;return +HEAPF32[dsp + offset >> 2];}function compute(dsp, count, inputs, outputs) {dsp = dsp | 0;count = count | 0;inputs = inputs | 0;outputs = outputs | 0;var input0 = 0;var output0 = 0;var fSlow0 = 0.;var iSlow1 = 0;var i = 0;input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);fSlow0 = +(0.001 * +(+(HEAPF32[dsp + 262152 >> 2])));iSlow1 = ((1 + ~~(+(44100. * +(max(0.01, +(min(1., +(+(HEAPF32[dsp + 262156 >> 2]))))))))) | 0);for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {HEAPF32[dsp + 262144 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 262144 + (1 << 2) >> 2])) + +(fSlow0));HEAPF32[dsp + 0 + ((((HEAP32[dsp + 262160 >> 2] | 0) & 65535) | 0) << 2) >> 2] = +(+(+(HEAPF32[input0 + ((i | 0) << 2) >> 2])) + +(+(HEAPF32[dsp + 262144 + (0 << 2) >> 2]) * +(HEAPF32[dsp + 0 + ((((((HEAP32[dsp + 262160 >> 2] | 0) - (iSlow1 | 0)) | 0) & 65535) | 0) << 2) >> 2])));HEAPF32[output0 + ((i | 0) << 2) >> 2] = +(+(HEAPF32[dsp + 0 + ((((((HEAP32[dsp + 262160 >> 2] | 0) - 0) | 0) & 65535) | 0) << 2) >> 2]));HEAPF32[dsp + 262144 + (1 << 2) >> 2] = +(HEAPF32[dsp + 262144 + (0 << 2) >> 2]);HEAP32[dsp + 262160 >> 2] = (((HEAP32[dsp + 262160 >> 2] | 0) + 1) | 0);}}return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, init : init, setValue : setValue, getValue : getValue, compute : compute };}function getSizemydsp1() {return 262168;}function getPathTablemydsp1() {var pathTable = [];pathTable[\"/Echo/Echo_Intensity_(Feedback)\"] = 262152;pathTable[\"/Echo/Echo_Delay\"] = 262156;return pathTable;}function getJSONmydsp1() {return \"{ \\\"name\\\": \\\"Echo\\\", \\\"inputs\\\": \\\"1\\\", \\\"outputs\\\": \\\"1\\\", \\\"meta\\\": [ { \\\"DSP\\\": \\\"MONO\\\" }, { \\\"http://192.168.1.61/faustcode/filter.lib/author\\\": \\\"Julius O. Smith (jos at ccrma.stanford.edu)\\\" }, { \\\"http://192.168.1.61/faustcode/filter.lib/copyright\\\": \\\"Julius O. Smith III\\\" }, { \\\"http://192.168.1.61/faustcode/filter.lib/license\\\": \\\"STK-4.3\\\" }, { \\\"http://192.168.1.61/faustcode/filter.lib/name\\\": \\\"Faust Filter Library\\\" }, { \\\"http://192.168.1.61/faustcode/filter.lib/reference\\\": \\\"https://ccrma.stanford.edu/~jos/filters/\\\" }, { \\\"http://192.168.1.61/faustcode/filter.lib/version\\\": \\\"1.29\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/author\\\": \\\"GRAME\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/copyright\\\": \\\"GRAME\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/license\\\": \\\"LGPL with exception\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/name\\\": \\\"Math Library\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/version\\\": \\\"1.0\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/author\\\": \\\"GRAME\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/copyright\\\": \\\"GRAME\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/license\\\": \\\"LGPL with exception\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/name\\\": \\\"Music Library\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/version\\\": \\\"1.0\\\" }, { \\\"name\\\": \\\"Echo\\\" } ], \\\"ui\\\": [ { \\\"type\\\": \\\"vgroup\\\", \\\"label\\\": \\\"Echo\\\", \\\"items\\\": [ { \\\"type\\\": \\\"hslider\\\", \\\"label\\\": \\\"Echo Delay\\\", \\\"address\\\": \\\"/Echo/Echo_Delay\\\", \\\"meta\\\": [ { \\\"unit\\\": \\\"s\\\" } ], \\\"init\\\": \\\"0.5\\\", \\\"min\\\": \\\"0.01\\\", \\\"max\\\": \\\"1\\\", \\\"step\\\": \\\"0.001\\\" }, { \\\"type\\\": \\\"hslider\\\", \\\"label\\\": \\\"Echo Intensity (Feedback)\\\", \\\"address\\\": \\\"/Echo/Echo_Intensity_(Feedback)\\\", \\\"meta\\\": [ { \\\"acc\\\": \\\"0 0 -10 0 10\\\" }, { \\\"style\\\": \\\"knob\\\" } ], \\\"init\\\": \\\"0.001\\\", \\\"min\\\": \\\"0.001\\\", \\\"max\\\": \\\"0.65\\\", \\\"step\\\": \\\"0.001\\\" } ] } ] } \";}function metadatamydsp1(m) {m.declare(\"DSP\", \"MONO\");m.declare(\"http://192.168.1.61/faustcode/filter.lib/author\", \"Julius O. Smith (jos at ccrma.stanford.edu)\");m.declare(\"http://192.168.1.61/faustcode/filter.lib/copyright\", \"Julius O. Smith III\");m.declare(\"http://192.168.1.61/faustcode/filter.lib/license\", \"STK-4.3\");m.declare(\"http://192.168.1.61/faustcode/filter.lib/name\", \"Faust Filter Library\");m.declare(\"http://192.168.1.61/faustcode/filter.lib/reference\", \"https://ccrma.stanford.edu/~jos/filters/\");m.declare(\"http://192.168.1.61/faustcode/filter.lib/version\", \"1.29\");m.declare(\"http://192.168.1.61/faustcode/math.lib/author\", \"GRAME\");m.declare(\"http://192.168.1.61/faustcode/math.lib/copyright\", \"GRAME\");m.declare(\"http://192.168.1.61/faustcode/math.lib/license\", \"LGPL with exception\");m.declare(\"http://192.168.1.61/faustcode/math.lib/name\", \"Math Library\");m.declare(\"http://192.168.1.61/faustcode/math.lib/version\", \"1.0\");m.declare(\"http://192.168.1.61/faustcode/music.lib/author\", \"GRAME\");m.declare(\"http://192.168.1.61/faustcode/music.lib/copyright\", \"GRAME\");m.declare(\"http://192.168.1.61/faustcode/music.lib/license\", \"LGPL with exception\");m.declare(\"http://192.168.1.61/faustcode/music.lib/name\", \"Music Library\");m.declare(\"http://192.168.1.61/faustcode/music.lib/version\", \"1.0\");m.declare(\"name\", \"Echo\");}"}},"2":{"patchId":"2","code":"process = vgroup(\"SOscillator\",environment{declare name \t\t\"osc\";\r\ndeclare version \t\"1.0\";\r\ndeclare author \t\t\"Grame\";\r\ndeclare license \t\"BSD\";\r\ndeclare copyright \t\"(c)GRAME 2009\";\r\n\r\n//-----------------------------------------------\r\n// \t\t\tSinusoidal Oscillator\r\n//-----------------------------------------------\r\n\r\n/* =========== DESCRIPTION =============\r\n\r\n- Simple sine wave oscillator\r\n- Left = low frequencies\r\n- Right = high frequencies\r\n- Front = around 300Hz\r\n- Rocking = from low to high\r\n*/ \r\n\r\nimport(\"music.lib\");\r\n\r\n\r\nsmooth(c)\t\t= *(1-c) : +~*(c);\r\nfreq \t\t\t= hslider(\"Frequency [unit:Hz] [acc:0 0 -10 0 10]\", 300, 70, 2400, 0.01):smooth(0.999);\r\nprocess \t\t= vgroup(\"Oscillator\", osc(freq));\r\n\r\n}.process);","name":"SOscillator","x":"282","y":"261","inputs":{"source":[]},"outputs":{"destination":["1"]},"params":{"sliders":[{"path":"/SOscillator/Oscillator/Frequency","value":300}]},"factory":{"name":"mydsp2","code":"/* ------------------------------------------------------------author: \"Grame\"copyright: \"(c)GRAME 2009\"license: \"BSD\"name: \"osc\"version: \"1.0\"Code generated with Faust 2.0.a41 (http://faust.grame.fr)------------------------------------------------------------ */function mydsp2Module(global, foreign, buffer) {'use asm';var HEAP32 = new global.Int32Array(buffer);var HEAPF32 = new global.Float32Array(buffer);var imul = global.Math.imul;var log = global.Math.log;var floorf = global.Math.floor;var max = global.Math.max;var min = global.Math.min;var sinf = global.Math.sin;function fmodf(x, y) { x = +x; y = +y; return +(x % y); }function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }function getNumInputsmydsp2SIG0(dsp) {dsp = dsp | 0;return 0;}function getNumOutputsmydsp2SIG0(dsp) {dsp = dsp | 0;return 1;}function instanceInitmydsp2SIG0(dsp, samplingFreq) {dsp = dsp | 0;samplingFreq = samplingFreq | 0;var i0 = 0;for (i0 = 0; (((i0 | 0) < 2) | 0); i0 = (((i0 | 0) + 1) | 0)) {HEAP32[dsp + 262160 + ((i0 | 0) << 2) >> 2] = 0;}}function fillmydsp2SIG0(dsp, count, output) {dsp = dsp | 0;count = count | 0;output = output | 0;var i = 0;for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {HEAP32[dsp + 262160 + (0 << 2) >> 2] = ((1 + (HEAP32[dsp + 262160 + (1 << 2) >> 2] | 0)) | 0);HEAPF32[output + ((i | 0) << 2) >> 2] = +(sinf(+(9.58738e-05 * +((((HEAP32[dsp + 262160 + (0 << 2) >> 2] | 0) - 1) | 0)))));HEAP32[dsp + 262160 + (1 << 2) >> 2] = (HEAP32[dsp + 262160 + (0 << 2) >> 2] | 0);}}function getNumInputs(dsp) {dsp = dsp | 0;return 0;}function getNumOutputs(dsp) {dsp = dsp | 0;return 1;}function classInit(dsp, samplingFreq) {dsp = dsp | 0;samplingFreq = samplingFreq | 0;instanceInitmydsp2SIG0(dsp, (samplingFreq | 0));fillmydsp2SIG0(dsp, 65536, (dsp + 0 | 0));}function instanceInit(dsp, samplingFreq) {dsp = dsp | 0;samplingFreq = samplingFreq | 0;var i1 = 0;var i2 = 0;HEAP32[dsp + 262168 >> 2] = (samplingFreq | 0);HEAPF32[dsp + 262172 >> 2] = +(1. / +(((min(192000, ((max(1, (HEAP32[dsp + 262168 >> 2] | 0))) | 0))) | 0)));HEAPF32[dsp + 262176 >> 2] = +(300.);for (i1 = 0; (((i1 | 0) < 2) | 0); i1 = (((i1 | 0) + 1) | 0)) {HEAPF32[dsp + 262144 + ((i1 | 0) << 2) >> 2] = 0.;}for (i2 = 0; (((i2 | 0) < 2) | 0); i2 = (((i2 | 0) + 1) | 0)) {HEAPF32[dsp + 262152 + ((i2 | 0) << 2) >> 2] = 0.;}}function init(dsp, samplingFreq) {dsp = dsp | 0;samplingFreq = samplingFreq | 0;classInit(dsp, samplingFreq);instanceInit(dsp, samplingFreq);}function setValue(dsp, offset, value) {dsp = dsp | 0;offset = offset | 0;value = +value;HEAPF32[dsp + offset >> 2] = value;}function getValue(dsp, offset) {dsp = dsp | 0;offset = offset | 0;return +HEAPF32[dsp + offset >> 2];}function compute(dsp, count, inputs, outputs) {dsp = dsp | 0;count = count | 0;inputs = inputs | 0;outputs = outputs | 0;var output0 = 0;var fSlow0 = 0.;var i = 0;var fTemp0 = 0.;output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);fSlow0 = +(0.001 * +(+(HEAPF32[dsp + 262176 >> 2])));for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {HEAPF32[dsp + 262144 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 262144 + (1 << 2) >> 2])) + +(fSlow0));fTemp0 = +(+(HEAPF32[dsp + 262152 + (1 << 2) >> 2]) + +(+(HEAPF32[dsp + 262172 >> 2]) * +(HEAPF32[dsp + 262144 + (0 << 2) >> 2])));HEAPF32[dsp + 262152 + (0 << 2) >> 2] = +(+(fTemp0) - +(floorf(+(fTemp0))));HEAPF32[output0 + ((i | 0) << 2) >> 2] = +(+(HEAPF32[dsp + 0 + (~~(+(65536. * +(HEAPF32[dsp + 262152 + (0 << 2) >> 2]))) << 2) >> 2]));HEAPF32[dsp + 262144 + (1 << 2) >> 2] = +(HEAPF32[dsp + 262144 + (0 << 2) >> 2]);HEAPF32[dsp + 262152 + (1 << 2) >> 2] = +(HEAPF32[dsp + 262152 + (0 << 2) >> 2]);}}return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, init : init, setValue : setValue, getValue : getValue, compute : compute };}function getSizemydsp2() {return 262180;}function getPathTablemydsp2() {var pathTable = [];pathTable[\"/SOscillator/Oscillator/Frequency\"] = 262176;return pathTable;}function getJSONmydsp2() {return \"{ \\\"name\\\": \\\"osc\\\", \\\"inputs\\\": \\\"0\\\", \\\"outputs\\\": \\\"1\\\", \\\"meta\\\": [ { \\\"DSP\\\": \\\"MONO\\\" }, { \\\"author\\\": \\\"Grame\\\" }, { \\\"copyright\\\": \\\"(c)GRAME 2009\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/author\\\": \\\"GRAME\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/copyright\\\": \\\"GRAME\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/license\\\": \\\"LGPL with exception\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/name\\\": \\\"Math Library\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/version\\\": \\\"1.0\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/author\\\": \\\"GRAME\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/copyright\\\": \\\"GRAME\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/license\\\": \\\"LGPL with exception\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/name\\\": \\\"Music Library\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/version\\\": \\\"1.0\\\" }, { \\\"license\\\": \\\"BSD\\\" }, { \\\"name\\\": \\\"osc\\\" }, { \\\"version\\\": \\\"1.0\\\" } ], \\\"ui\\\": [ { \\\"type\\\": \\\"vgroup\\\", \\\"label\\\": \\\"SOscillator\\\", \\\"items\\\": [ { \\\"type\\\": \\\"vgroup\\\", \\\"label\\\": \\\"Oscillator\\\", \\\"items\\\": [ { \\\"type\\\": \\\"hslider\\\", \\\"label\\\": \\\"Frequency\\\", \\\"address\\\": \\\"/SOscillator/Oscillator/Frequency\\\", \\\"meta\\\": [ { \\\"acc\\\": \\\"0 0 -10 0 10\\\" }, { \\\"unit\\\": \\\"Hz\\\" } ], \\\"init\\\": \\\"300\\\", \\\"min\\\": \\\"70\\\", \\\"max\\\": \\\"2400\\\", \\\"step\\\": \\\"0.01\\\" } ] } ] } ] } \";}function metadatamydsp2(m) {m.declare(\"DSP\", \"MONO\");m.declare(\"author\", \"Grame\");m.declare(\"copyright\", \"(c)GRAME 2009\");m.declare(\"http://192.168.1.61/faustcode/math.lib/author\", \"GRAME\");m.declare(\"http://192.168.1.61/faustcode/math.lib/copyright\", \"GRAME\");m.declare(\"http://192.168.1.61/faustcode/math.lib/license\", \"LGPL with exception\");m.declare(\"http://192.168.1.61/faustcode/math.lib/name\", \"Math Library\");m.declare(\"http://192.168.1.61/faustcode/math.lib/version\", \"1.0\");m.declare(\"http://192.168.1.61/faustcode/music.lib/author\", \"GRAME\");m.declare(\"http://192.168.1.61/faustcode/music.lib/copyright\", \"GRAME\");m.declare(\"http://192.168.1.61/faustcode/music.lib/license\", \"LGPL with exception\");m.declare(\"http://192.168.1.61/faustcode/music.lib/name\", \"Music Library\");m.declare(\"http://192.168.1.61/faustcode/music.lib/version\", \"1.0\");m.declare(\"license\", \"BSD\");m.declare(\"name\", \"osc\");m.declare(\"version\", \"1.0\");}"}},"3":{"patchId":"3","code":"process = vgroup(\"Volume\",environment{declare name \"Volume\";\r\ndeclare author \"GRAME\";\r\n\r\n/* ========== DESCRITPION ===========\r\n\r\n- Simple volume slider\r\n- Head = Silence\r\n- Bottom = Max volume\r\n\r\n*/\r\n\r\nimport(\"filter.lib\");\r\n\r\nprocess = par(i,2,*(hslider(\"Volume[acc:1 1 -10 0 10]\", 0.75, 0, 1, 0.01):smooth(0.999)));\r\n}.process);","name":"Volume","x":"830","y":"148","inputs":{"source":["1"]},"outputs":{"destination":["output"]},"params":{"sliders":[{"path":"/Volume/Volume","value":0.75}]},"factory":{"name":"mydsp3","code":"/* ------------------------------------------------------------author: \"GRAME\"name: \"Volume\"Code generated with Faust 2.0.a41 (http://faust.grame.fr)------------------------------------------------------------ */function mydsp3Module(global, foreign, buffer) {'use asm';var HEAP32 = new global.Int32Array(buffer);var HEAPF32 = new global.Float32Array(buffer);var imul = global.Math.imul;var log = global.Math.log;function fmodf(x, y) { x = +x; y = +y; return +(x % y); }function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }function getNumInputs(dsp) {dsp = dsp | 0;return 2;}function getNumOutputs(dsp) {dsp = dsp | 0;return 2;}function classInit(dsp, samplingFreq) {dsp = dsp | 0;samplingFreq = samplingFreq | 0;}function instanceInit(dsp, samplingFreq) {dsp = dsp | 0;samplingFreq = samplingFreq | 0;var i0 = 0;HEAP32[dsp + 12 >> 2] = (samplingFreq | 0);HEAPF32[dsp + 8 >> 2] = +(0.75);for (i0 = 0; (((i0 | 0) < 2) | 0); i0 = (((i0 | 0) + 1) | 0)) {HEAPF32[dsp + 0 + ((i0 | 0) << 2) >> 2] = 0.;}}function init(dsp, samplingFreq) {dsp = dsp | 0;samplingFreq = samplingFreq | 0;classInit(dsp, samplingFreq);instanceInit(dsp, samplingFreq);}function setValue(dsp, offset, value) {dsp = dsp | 0;offset = offset | 0;value = +value;HEAPF32[dsp + offset >> 2] = value;}function getValue(dsp, offset) {dsp = dsp | 0;offset = offset | 0;return +HEAPF32[dsp + offset >> 2];}function compute(dsp, count, inputs, outputs) {dsp = dsp | 0;count = count | 0;inputs = inputs | 0;outputs = outputs | 0;var input0 = 0;var input1 = 0;var output0 = 0;var output1 = 0;var fSlow0 = 0.;var i = 0;input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);input1 = (HEAP32[inputs + (1 << 2) >> 2] | 0);output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);fSlow0 = +(0.001 * +(+(HEAPF32[dsp + 8 >> 2])));for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {HEAPF32[dsp + 0 + (0 << 2) >> 2] = +(+(0.999 * +(HEAPF32[dsp + 0 + (1 << 2) >> 2])) + +(fSlow0));HEAPF32[output0 + ((i | 0) << 2) >> 2] = +(+(+(+(HEAPF32[input0 + ((i | 0) << 2) >> 2])) * +(HEAPF32[dsp + 0 + (0 << 2) >> 2])));HEAPF32[output1 + ((i | 0) << 2) >> 2] = +(+(+(+(HEAPF32[input1 + ((i | 0) << 2) >> 2])) * +(HEAPF32[dsp + 0 + (0 << 2) >> 2])));HEAPF32[dsp + 0 + (1 << 2) >> 2] = +(HEAPF32[dsp + 0 + (0 << 2) >> 2]);}}return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, init : init, setValue : setValue, getValue : getValue, compute : compute };}function getSizemydsp3() {return 16;}function getPathTablemydsp3() {var pathTable = [];pathTable[\"/Volume/Volume\"] = 8;return pathTable;}function getJSONmydsp3() {return \"{ \\\"name\\\": \\\"Volume\\\", \\\"inputs\\\": \\\"2\\\", \\\"outputs\\\": \\\"2\\\", \\\"meta\\\": [ { \\\"DSP\\\": \\\"MONO\\\" }, { \\\"author\\\": \\\"GRAME\\\" }, { \\\"http://192.168.1.61/faustcode/filter.lib/author\\\": \\\"Julius O. Smith (jos at ccrma.stanford.edu)\\\" }, { \\\"http://192.168.1.61/faustcode/filter.lib/copyright\\\": \\\"Julius O. Smith III\\\" }, { \\\"http://192.168.1.61/faustcode/filter.lib/license\\\": \\\"STK-4.3\\\" }, { \\\"http://192.168.1.61/faustcode/filter.lib/name\\\": \\\"Faust Filter Library\\\" }, { \\\"http://192.168.1.61/faustcode/filter.lib/reference\\\": \\\"https://ccrma.stanford.edu/~jos/filters/\\\" }, { \\\"http://192.168.1.61/faustcode/filter.lib/version\\\": \\\"1.29\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/author\\\": \\\"GRAME\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/copyright\\\": \\\"GRAME\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/license\\\": \\\"LGPL with exception\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/name\\\": \\\"Math Library\\\" }, { \\\"http://192.168.1.61/faustcode/math.lib/version\\\": \\\"1.0\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/author\\\": \\\"GRAME\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/copyright\\\": \\\"GRAME\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/license\\\": \\\"LGPL with exception\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/name\\\": \\\"Music Library\\\" }, { \\\"http://192.168.1.61/faustcode/music.lib/version\\\": \\\"1.0\\\" }, { \\\"name\\\": \\\"Volume\\\" } ], \\\"ui\\\": [ { \\\"type\\\": \\\"vgroup\\\", \\\"label\\\": \\\"Volume\\\", \\\"items\\\": [ { \\\"type\\\": \\\"hslider\\\", \\\"label\\\": \\\"Volume\\\", \\\"address\\\": \\\"/Volume/Volume\\\", \\\"meta\\\": [ { \\\"acc\\\": \\\"1 1 -10 0 10\\\" } ], \\\"init\\\": \\\"0.75\\\", \\\"min\\\": \\\"0\\\", \\\"max\\\": \\\"1\\\", \\\"step\\\": \\\"0.01\\\" } ] } ] } \";}function metadatamydsp3(m) {m.declare(\"DSP\", \"MONO\");m.declare(\"author\", \"GRAME\");m.declare(\"http://192.168.1.61/faustcode/filter.lib/author\", \"Julius O. Smith (jos at ccrma.stanford.edu)\");m.declare(\"http://192.168.1.61/faustcode/filter.lib/copyright\", \"Julius O. Smith III\");m.declare(\"http://192.168.1.61/faustcode/filter.lib/license\", \"STK-4.3\");m.declare(\"http://192.168.1.61/faustcode/filter.lib/name\", \"Faust Filter Library\");m.declare(\"http://192.168.1.61/faustcode/filter.lib/reference\", \"https://ccrma.stanford.edu/~jos/filters/\");m.declare(\"http://192.168.1.61/faustcode/filter.lib/version\", \"1.29\");m.declare(\"http://192.168.1.61/faustcode/math.lib/author\", \"GRAME\");m.declare(\"http://192.168.1.61/faustcode/math.lib/copyright\", \"GRAME\");m.declare(\"http://192.168.1.61/faustcode/math.lib/license\", \"LGPL with exception\");m.declare(\"http://192.168.1.61/faustcode/math.lib/name\", \"Math Library\");m.declare(\"http://192.168.1.61/faustcode/math.lib/version\", \"1.0\");m.declare(\"http://192.168.1.61/faustcode/music.lib/author\", \"GRAME\");m.declare(\"http://192.168.1.61/faustcode/music.lib/copyright\", \"GRAME\");m.declare(\"http://192.168.1.61/faustcode/music.lib/license\", \"LGPL with exception\");m.declare(\"http://192.168.1.61/faustcode/music.lib/name\", \"Music Library\");m.declare(\"http://192.168.1.61/faustcode/music.lib/version\", \"1.0\");m.declare(\"name\", \"Volume\");}"}}}